<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Matter on kurisaW</title><link>https://kurisaw.github.io/categories/matter/</link><description>Recent content in Matter on kurisaW</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 20 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kurisaw.github.io/categories/matter/index.xml" rel="self" type="application/rss+xml"/><item><title>【Matter】CHIP设备层设计笔记</title><link>https://kurisaw.github.io/p/matterchip%E8%AE%BE%E5%A4%87%E5%B1%82%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 20 Aug 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/matterchip%E8%AE%BE%E5%A4%87%E5%B1%82%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/</guid><description>&lt;img src="https://kurisaw.github.io/p/matterchip%E8%AE%BE%E5%A4%87%E5%B1%82%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0/cover.jpg" alt="Featured image of post 【Matter】CHIP设备层设计笔记" />&lt;h1 id="chip设备层设计笔记">CHIP设备层设计笔记
&lt;/h1>&lt;p>本文档包含与 CHIP 设备层 ( &lt;code>src/platform&lt;/code>) 内部设计相关的概述、注释和其他信息材料。它旨在作为对实现者有价值的主题的托管文档的地方，但由于大小或范围的原因，它自然不适合代码中的注释。&lt;/p>
&lt;p>这是一个动态文档，具有非正式的结构，随代码一起发展。我们鼓励开发人员添加他们认为对其他工程师有用的东西。&lt;/p>
&lt;p>本文档包含以下部分：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/platform#Device-Layer-Adaptation-Patterns" target="_blank" rel="noopener"
>设备层适配模式&lt;/a>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="设备层适配模式">设备层适配模式
&lt;/h3>&lt;p>设备层使用各种设计模式，使代码更容易适应不同的平台和操作环境。&lt;/p>
&lt;p>CHIP 设备层旨在跨各种平台和操作环境工作。这些环境可能因系统类型、操作系统、网络堆栈和/或线程模型而异。设备层的目标之一是使 CHIP 应用程序堆栈能够轻松适应新环境。在新平台与现有改编基本相似的情况下，这是特别理想的。&lt;/p>
&lt;p>作为其设计的一部分，CHIP 设备层支持代码重用模式，努力减少对预处理器条件（例如#ifdef）的需求。虽然没有完全消除#ifdef，但该设计允许将行为中的主要差异表示为不同的代码库（通常是单独的 C++ 类），然后通过组合将它们组合在一起以实现特定的适应。&lt;/p>
&lt;p>为了提高应用程序的可移植性，CHIP 设备层采用静态多态性模式将其应用程序可见的 API 与底层特定于平台的实现隔离开来。设备层本身使用类似的接口模式来提供组件之间的划分。&lt;/p>
&lt;p>尽可能通过使用零成本抽象模式（代码大小和执行开销方面的零成本）来实现上述目标。我们努力使模式易于使用，没有太多的概念负担或繁琐的语法。&lt;/p>
&lt;p>以下各节描述了用于实现这些目标的一些模式。&lt;/p>
&lt;ol>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/platform#Interface-and-Implementation-Classes" target="_blank" rel="noopener"
>接口和实现类&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/platform#Method-Forwarding" target="_blank" rel="noopener"
>方法转发&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/platform#Target-Platform-Selection" target="_blank" rel="noopener"
>目标平台选择&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/platform#Generic-Implementation-Classes" target="_blank" rel="noopener"
>通用实现类&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/platform#Overriding-Generic-Behaviors" target="_blank" rel="noopener"
>覆盖通用行为&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/platform#Multiple-Inheritance-and-Subclassing-of-Generic-Implementations" target="_blank" rel="noopener"
>通用实现的多重继承和子类化&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/platform#Static-Virtualization-of-Generic-Implementation-Behavior" target="_blank" rel="noopener"
>通用实现行为的静态虚拟化&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/platform#-ipp-files-and-explicit-template-instantiation" target="_blank" rel="noopener"
>.cpp 文件和显式模板实例化&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;h3 id="接口和实现类">接口和实现类
&lt;/h3>&lt;p>CHIP设备层使用双类模式将组件对象的抽象特征（通常是其外部可见的方法）与特定平台上这些特征的具体实现分开。遵循这种模式，设备层中的每个主要组件都体现在（至少）两个 C++ 类中：一个抽象接口类和一个实现类。&lt;/p>
&lt;p>外部可见的&lt;em>&lt;strong>抽象接口类&lt;/strong>&lt;/em>定义了一组通用方法（以及可能的其他成员），这些方法对组件用户普遍可用，但独立于底层实现。接口类本身不包含任何功能，而是使用零成本抽象技术将所有方法调用转发到关联的实现类。接口类用于形式化组件的功能接口，并提供托管与实现无关的 API 文档的位置。&lt;/p>
&lt;p>实现&lt;em>&lt;strong>类&lt;/strong>&lt;/em>提供了接口类公开的逻辑功能的具体的、特定于平台的实现。这一功能可以由类本身直接提供（即在其方法内），或者通过委托给一个或多个辅助类来提供。&lt;/p>
&lt;p>设备层的每个主要应用程序可见组件都存在成对的抽象接口类和实现类。此外，在设备层中定义了类似的类对，以帮助组件之间的隔离。&lt;/p>
&lt;p>抽象接口类根据它们提供的功能来命名，例如ConfigurationManager、ConnectivityManager 等。实现类采用其接口类的名称并附加后缀&lt;code>Impl&lt;/code>。在所有情况下，实现类都需要从其接口类公开继承。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">class ConfigurationManagerImpl;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/** Interface class for ConfigurationManager component
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ConfigurationManager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> using ImplClass = ConfigurationManagerImpl;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHIP_ERROR GetDeviceId(uint64_t &amp;amp; deviceId);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static CHIP_ERROR Init();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/** Concrete implementation of ConfigurationManager component for a specific platform
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ConfigurationManagerImpl final
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : public ConfigurationManager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="方法转发">方法转发
&lt;/h3>&lt;p>接口类通过称为转发方法的短内联函数将***方法调用转发***到其实现类。&lt;code>this&lt;/code>这些方法通过向下转换对象的指针并调用实现类上类似命名的方法来转发来自应用程序的调用。此模式类似于 C++ &lt;a class="link" href="https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern" target="_blank" rel="noopener"
>奇怪的重复模板模式&lt;/a> ，不同之处在于基类和子类之间的关系是固定的，而不是表示为模板参数。接口内使用了类型别名named，&lt;code>ImplClass&lt;/code>使转发方法定义更加简洁。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">inline CHIP_ERROR ConfigurationManager::GetDeviceId(uint64_t &amp;amp; deviceId)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* forward method call... */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return static_cast&amp;lt;ImplClass*&amp;gt;(this)-&amp;gt;_GetDeviceId(deviceId);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该模式的一个便利功能是它允许转发静态方法以及实例方法。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">inline CHIP_ERROR ConfigurationManager::Init()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ImplClass::_Init();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>作为转发方法目标的实现类上的方法称为*&lt;strong>实现方法*&lt;/strong>。每一种转发方法都必须有相应的实现方法。&lt;/p>
&lt;p>前导下划线（_）用于区分实现方法与其转发方法。这种安排有助于强调两者之间的区别，并确保在实现者忽略提供实现方法时生成编译错误。&lt;/p>
&lt;p>实现方法并不意味着直接调用。为了阻止这种类型的使用，实现类将其实现方法声明为私有，然后使用友元声明为接口类提供（唯一）调用这些方法作为转发的一部分的权利。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">class ConfigurationManagerImpl;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/** Interface class for ConfigurationManager component
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ConfigurationManager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> using ImplClass = ConfigurationManagerImpl;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHIP_ERROR GetDeviceId(uint64_t &amp;amp; deviceId);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static CHIP_ERROR Init();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/** Concrete implementation of ConfigurationManager component for specific platform
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ConfigurationManagerImpl final : public ConfigurationManager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* Let the forwarding methods on ConfigurationManager call implementation
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> methods on this class. */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> friend ConfigurationManager;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">private:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHIP_ERROR _GetDeviceId(uint64_t &amp;amp; deviceId);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static CHIP_ERROR _Init();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inline CHIP_ERROR ConfigurationManager::GetDeviceId(uint64_t &amp;amp; deviceId)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* Forward calls to corresponding implementation method... */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return static_cast&amp;lt;ImplClass*&amp;gt;(this)-&amp;gt;_GetDeviceId(deviceId);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">inline CHIP_ERROR ConfigurationManager::Init()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* Forward calls to corresponding static implementation method... */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return ImplClass::_Init();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="目标平台选择">目标平台选择
&lt;/h3>&lt;p>实现类提供了在特定平台上使用的设备层组件的具体实现。同一组件的设备层源代码树中可能存在多个实现类。每个类都具有相同的名称，但它们的代码对于相关平台来说是唯一的。在编译时选择包含哪个实现类是通过计算的 #include 指令完成的，其形式如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/* contents of ConfigurationManager.h */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#define CONFIGURATIONMANAGERIMPL_HEADER \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;platform/CHIP_DEVICE_LAYER_TARGET/ConfigurationManagerImpl.h&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#include CONFIGURATIONMANAGERIMPL_HEADER
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>该指令出现在定义组件接口类的头文件中。C++ 预处理器自动扩展 #include 行以根据所选平台选择适当的实现标头。这样，包含组件接口头文件的源文件自然也可以获得正确的实现头文件。&lt;/p>
&lt;p>每个受支持平台的实现头文件都排列在以其目标平台命名的子目录中（例如&lt;code>ESP32&lt;/code>）。所有此类文件都具有相同的文件名（例如&lt;code>ConfigurationManagerImpl.h&lt;/code>），并且每个文件都包含类似名称的类的定义（&lt;code>ConfigurationManagerImpl&lt;/code>）。&lt;/p>
&lt;p>特定于平台的源文件放置在紧邻设备层根源目录下面的子目录中（例如 &lt;code>src/adaptations/device-layer/ESP32&lt;/code>）。与特定于平台的头目录一样，这些子目录以目标平台命名。&lt;/p>
&lt;p>设备层目标平台的选择是在项目配置时使用配置脚本选项指定的 &lt;code>--device-layer=&amp;lt;target-platform&amp;gt;&lt;/code>。传递 &amp;ndash;device-layer 选项会导致一对预处理器符号的定义，其中目标平台的名称已合并到定义中。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#define CHIP_DEVICE_LAYER_TARGET ESP32
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">#define CHIP_DEVICE_LAYER_TARGET_ESP32 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&amp;ndash;device-layer 配置选项还选择要包含在生成的库文件中的适当的特定于平台的源文件集。这是通过设备层 Makefile.am 中的逻辑完成的。&lt;/p>
&lt;h3 id="通用实现类">通用实现类
&lt;/h3>&lt;p>通常可以在一系列平台上共享实现代码。在某些情况下，所有目标的相关代码基本上都是相同的，每种情况下只需要进行少量的定制。在其他情况下，实现的通用性扩展到共享特定架构功能的平台子集，例如通用操作系统（Linux、FreeRTOS）或网络堆栈（套接字、LwIP）。&lt;/p>
&lt;p>为了适应这一点，CHIP 设备层鼓励采用一种将通用功能分解为***通用实现基类的***模式。然后，这些基类用于组成（通过继承）构成组件基础的具体实现类。&lt;/p>
&lt;p>通用实现基类被实现为遵循 C++ &lt;a class="link" href="https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern" target="_blank" rel="noopener"
>奇怪重复模板模式的&lt;/a>C++ 类模板。希望合并常见行为的实现类从模板的实例继承，将实现类本身作为模板的参数传递。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/** Generic base class for use in implementing ConfigurationManager components
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">template&amp;lt;class ImplClass&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class GenericConfigurationManagerImpl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/** Concrete implementation of ConfigurationManager component for specific platform
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ConfigurationManagerImpl final
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : public ConfigurationManager,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public GenericConfigurationManagerImpl&amp;lt;ConfigurationManagerImpl&amp;gt; /* &amp;lt;-- Implementation provided by
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> generic base class. */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在许多情况下，通用实现基类本身将直接提供满足组件接口所需的部分或全部实现方法。C++ 方法解析的规则是对接口类上的转发方法的调用直接映射到基类方法。在这种情况下，派生实现类根本不需要声明目标方法的版本，并且方法调用在编译时静态转发，没有任何开销。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/** Interface class for ConfigurationManager component
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ConfigurationManager
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> using ImplClass = ConfigurationManagerImpl;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">public:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHIP_ERROR GetDeviceId(uint64_t &amp;amp; deviceId);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> static CHIP_ERROR Init();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/** Generic base class for use in implementing ConfigurationManager components
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">template&amp;lt;class ImplClass&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class GenericConfigurationManagerImpl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">protected:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHIP_ERROR _GetDeviceId(uint64_t &amp;amp; deviceId); /* &amp;lt;-- Invoked when GetDeviceId() called. */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/** Concrete implementation of ConfigurationManager component for specific platform
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ConfigurationManagerImpl final
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : public ConfigurationManager,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public GenericConfigurationManagerImpl&amp;lt;ConfigurationManagerImpl&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="覆盖通用行为">覆盖通用行为
&lt;/h3>&lt;p>如果需要，具体实现类可以自由地覆盖通用基类提供的实现方法。这是通过在实现类上定义该方法的特定于平台的版本来完成的。C++ 的规则导致优先于泛型方法调用实现类上的方法。&lt;/p>
&lt;p>新方法可以完全取代通用方法的行为，或者可以通过在其自己的实现过程中调用通用方法来增强其行为。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">CHIP_ERROR ConfigurationManagerImpl::_GetDeviceId(uint64_t &amp;amp; deviceId)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> using GenericImpl = GenericConfigurationManagerImpl&amp;lt;ConfigurationManagerImpl&amp;gt;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* Call the generic implementation to get the device id. */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uint64_t deviceId = GenericImpl::_GetDeviceId(deviceId);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /* Special case the situation where the device id is not known. */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (deviceId == kNodeIdNotSpecified) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> deviceId = PLATFORM_DEFAULT_DEVICE_ID;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> return deviceId;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="通用实现的多重继承和子类化">通用实现的多重继承和子类化
&lt;/h3>&lt;p>具体实现类可以自由地从多个通用基类继承。当组件的整体功能可以自然地分割成独立的片（例如支持 WiFi 的方法和支持 Thread 的方法）时，此模式特别有用。然后，每个这样的切片都可以通过一个不同的基类来实现，该基类最终在最终实现中与其他基类组合在一起。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/** Concrete implementation of ConfigurationManager component for specific platform
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class ConfigurationManagerImpl final
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : public ConfigurationManager,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public GenericWiFiConfigurationManagerImpl&amp;lt;ConfigurationManagerImpl&amp;gt;, /* &amp;lt;-- WiFi features */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> public GenericThreadConfigurationManagerImpl&amp;lt;ConfigurationManagerImpl&amp;gt; /* &amp;lt;-- Thread features */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通用实现基类还可以从其他通用基类继承。这对于“专门化”特定用例子范围（例如，特定操作系统类型）的通用实现非常有用。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/** Generic base class for use in implementing PlatformManager features
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * on all platforms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">template&amp;lt;class ImplClass&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class GenericPlatformManagerImpl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/** Generic base class for use in implementing PlatformManager features
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> * on FreeRTOS platforms.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">template&amp;lt;class ImplClass&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class GenericPlatformManagerImpl_FreeRTOS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> : public GenericPlatformManagerImpl&amp;lt;ImplClass&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="通用实现行为的静态虚拟化">通用实现行为的静态虚拟化
&lt;/h3>&lt;p>在创建通用实现基类时，如果操作可能或必须以特定于平台的方式实现，则鼓励开发人员使用静态虚拟化模式将操作委托给具体实现类。&lt;/p>
&lt;p>例如，考虑 ConfigurationManager 组件的通用实现，其中值访问器方法通过&lt;code>GetDeviceId()&lt;/code>从底层键值存储中检索值来进行操作。键值存储的实现方式的细节可能会因平台而异。为了实现这一点，通用实现类被构造为将检索键值的操作委托给具体实现类上的方法。&lt;/p>
&lt;p>&lt;code>this&lt;/code>遵循奇怪的重复模板模式，通过将指针强制转换为实现类并调用具有适当签名的方法来完成委托。名为 的内联辅助函数&lt;code>Impl()&lt;/code>有助于使代码简洁。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="n">ImplClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="n">GenericConfigurationManagerImpl&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">protected&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHIP_ERROR&lt;/span> &lt;span class="n">_GetDeviceId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uint64_t&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">deviceId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">private&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ImplClass&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">Impl&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ImplClass&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="n">ConfigurationManagerImpl&lt;/span> &lt;span class="n">final&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">:&lt;/span> &lt;span class="n">public&lt;/span> &lt;span class="n">ConfigurationManager&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">public&lt;/span> &lt;span class="n">GenericConfigurationManagerImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConfigurationManagerImpl&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">friend&lt;/span> &lt;span class="n">GenericConfigurationManagerImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConfigurationManagerImpl&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">private&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CHIP_ERROR&lt;/span> &lt;span class="n">ReadConfigValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uint64_t&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="n">ImplClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">CHIP_ERROR&lt;/span> &lt;span class="n">GenericConfigurationManagerImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ImplClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">_GetDeviceId&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">uint64_t&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">deviceId&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">/*&lt;/span> &lt;span class="n">delegate&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">implementation&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">read&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="s1">&amp;#39;device-id&amp;#39;&lt;/span> &lt;span class="n">config&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">Impl&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ReadConfigValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">“&lt;/span>&lt;span class="n">device&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">deviceId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">CHIP_ERROR&lt;/span> &lt;span class="n">ConfigurationManagerImpl&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">ReadConfigValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">uint64_t&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">/*&lt;/span> &lt;span class="n">read&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="n">platform&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">specific&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">value&lt;/span> &lt;span class="n">store&lt;/span> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在上面的示例中，委托方法在概念上是“纯虚拟”的，因为具体实现类必须提供该方法的版本，否则编译将失败。在其他情况下，可以使用类似的模式来允许实现根据需要覆盖基类提供的默认行为。&lt;/p>
&lt;p>同样，委托是通过转换&lt;code>this&lt;/code>指针并调用适当的方法来发生的。然而，在这种情况下，通用基类提供了目标方法的默认实现，除非子类重写它，否则将使用该目标方法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="n">ImplClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="n">GenericPlatformManagerImpl&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">protected&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">_DispatchEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">CHIPDeviceEvent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">void&lt;/span> &lt;span class="n">DispatchEventToApplication&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">CHIPDeviceEvent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">private&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ImplClass&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">Impl&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ImplClass&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">this&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="n">ImplClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">void&lt;/span> &lt;span class="n">GenericPlatformManagerImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ImplClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">_DispatchEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">CHIPDeviceEvent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">/*&lt;/span> &lt;span class="n">Delegate&lt;/span> &lt;span class="n">work&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">method&lt;/span> &lt;span class="n">that&lt;/span> &lt;span class="n">can&lt;/span> &lt;span class="n">be&lt;/span> &lt;span class="n">overridden&lt;/span> &lt;span class="n">by&lt;/span> &lt;span class="n">implementation&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Impl&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">DispatchEventToApplication&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">event&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="n">ImplClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">void&lt;/span> &lt;span class="n">GenericPlatformManagerImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ImplClass&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">::&lt;/span>&lt;span class="n">DispatchEventToApplication&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">CHIPDeviceEvent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">event&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">/*&lt;/span> &lt;span class="n">provide&lt;/span> &lt;span class="n">default&lt;/span> &lt;span class="n">implementation&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">DispatchEventToApplication&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="cpp-文件和显式模板实例化">.cpp 文件和显式模板实例化
&lt;/h3>&lt;p>C++ 模板的规则要求编译器在实例化时“查看”类模板的完整定义。（在此上下文中的实例化意味着编译器被迫根据模板提供的配方生成实际的类）。通常，这需要将类模板的整个定义（包括其所有方法）放入头文件中，然后必须在实例化之前将其包含在内。&lt;/p>
&lt;p>为了将类模板的定义与其成员的定义分开，CHIP 设备层将所有非内联模板成员定义放入单独的文件中。该文件与模板头文件具有相同的基本名称，但带有后缀&lt;code>.cpp&lt;/code>。这种模式减少了头文件中的混乱，并且可以仅在需要时才包含非内联成员定义（更多内容见下文）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/* contents of GenericConfigurationManagerImpl.h */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">template&amp;lt;class ImplClass&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">class GenericConfigurationManagerImpl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">protected:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> CHIP_ERROR _GetDeviceId(uint64_t &amp;amp; deviceId);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">/* contents of GenericConfigurationManagerImpl.cpp */
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">template&amp;lt;class ImplClass&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CHIP_ERROR GenericConfigurationManagerImpl&amp;lt;ImplClass&amp;gt;::_GetDeviceId(uint64_t &amp;amp; deviceId)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>通常情况下，C++ 编译器被迫多次实例化类模板，为其编译的每个 .cpp 文件实例化一次。这会显着增加编译过程的开销。&lt;a class="link" href="https://en.cppreference.com/w/cpp/language/class_template#Explicit_instantiation" target="_blank" rel="noopener"
>为了避免这种情况，设备层使用显式模板实例化&lt;/a>的 C++11 技术 来指示编译器仅实例化模板一次。这是通过两个步骤完成的：首先，所有使用类模板的头文件&lt;code>extern template class&lt;/code>在使用模板类之前都包含一个声明。这告诉编译器&lt;em>不要&lt;/em>在该上下文中实例化模板。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* contents of ConfigurationManagerImpl.h */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;CHIP/DeviceLayer/internal/GenericConfigurationManagerImpl.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Instruct the compiler to instantiate the GenericConfigurationManagerImpl&amp;lt;ConfigurationManagerImpl&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// class only when explicitly asked to do so.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="n">template&lt;/span> &lt;span class="n">class&lt;/span> &lt;span class="n">GenericConfigurationManagerImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConfigurationManagerImpl&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后，在相应的 .cpp 文件中，包含模板的 .cpp 文件，并&lt;code>template class&lt;/code>使用定义来强制显式实例化模板。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* contents of ConfigurationManagerImpl.cpp */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;CHIP/DeviceLayer/internal/GenericConfigurationManagerImpl.cpp&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Fully instantiate the GenericConfigurationManagerImpl&amp;lt;ConfigurationManagerImpl&amp;gt; class.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">template&lt;/span> &lt;span class="n">class&lt;/span> &lt;span class="n">GenericConfigurationManagerImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ConfigurationManagerImpl&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>结果是，在编译引用的 .cpp 文件期间，模板的非内联成员仅被解析和实例化一次，从而避免了其他上下文中的冗余处理。&lt;/p></description></item><item><title>【Matter】如何在Linux平台下测试Matter应用级通信（虚拟设备）</title><link>https://kurisaw.github.io/p/matter%E5%A6%82%E4%BD%95%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8B%E6%B5%8B%E8%AF%95matter%E5%BA%94%E7%94%A8%E7%BA%A7%E9%80%9A%E4%BF%A1%E8%99%9A%E6%8B%9F%E8%AE%BE%E5%A4%87/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/matter%E5%A6%82%E4%BD%95%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8B%E6%B5%8B%E8%AF%95matter%E5%BA%94%E7%94%A8%E7%BA%A7%E9%80%9A%E4%BF%A1%E8%99%9A%E6%8B%9F%E8%AE%BE%E5%A4%87/</guid><description>&lt;img src="https://kurisaw.github.io/p/matter%E5%A6%82%E4%BD%95%E5%9C%A8linux%E5%B9%B3%E5%8F%B0%E4%B8%8B%E6%B5%8B%E8%AF%95matter%E5%BA%94%E7%94%A8%E7%BA%A7%E9%80%9A%E4%BF%A1%E8%99%9A%E6%8B%9F%E8%AE%BE%E5%A4%87/cover.jpg" alt="Featured image of post 【Matter】如何在Linux平台下测试Matter应用级通信（虚拟设备）" />&lt;h1 id="如何在linux平台下测试matter应用级通信虚拟设备">如何在Linux平台下测试Matter应用级通信(虚拟设备)
&lt;/h1>&lt;hr>
&lt;h2 id="准备工作">准备工作
&lt;/h2>&lt;h3 id="1-递归克隆matter仓库">1. 递归克隆Matter仓库
&lt;/h3>&lt;p>执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone --recurse-submodules git@github.com:project-chip/connectedhomeip.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果克隆过程中发生报错，请执行如下命令来同步子模块：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git submodule update --init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于我们的环境构建配置均是基于Matter1.0，所以我们需要切换到v1.0分支下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git checkout v1.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2-matter依赖项安装">2. Matter依赖项安装
&lt;/h3>&lt;p>Matter 构建依赖于以下软件包及环境库：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt-get install git gcc g++ pkg-config libssl-dev libdbus-1-dev &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> libglib2.0-dev libavahi-client-dev ninja-build python3-venv python3-dev &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> python3-pip unzip libgirepository1.0-dev libcairo2-dev libreadline-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果通过&lt;code> build_examples.py&lt;/code> 和 &lt;code>-with-ui&lt;/code> 变体进行构建，也要安装 SDL2：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt-get install libsdl2-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3-matter环境构建">3. Matter环境构建
&lt;/h3>&lt;p>执行&lt;code>scripts/activate.sh&lt;/code>脚本。该脚本负责下载 GN、ninja，并使用用于构建和测试的库设置 Python 环境。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> scripts/activate.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306190833624.png"
loading="lazy"
alt="image-20230619083303148"
>&lt;/p>
&lt;p>如果显示环境已过期可执行如下命令进行更新（一般如果没提示环境已过期的提示不建议执行这一步，编译会花一段时间）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> scripts/bootstrap.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4-安装zap">4. 安装zap
&lt;/h3>&lt;blockquote>
&lt;p>注意：zap 包目前不可用&lt;code>arm64&lt;/code>（比如在 Raspberry PI 上编译时）。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>**Step1：ZAP需要Node.js来运行，请先确保你的计算机上已经安装了Node.js。**可以使用以下命令：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">node -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果安装的话不出意外会出现版本号。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Step2：zap安装&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> connectedhomeip/scripts/tools/zap
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3 zap_download.py
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面是安装日志：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">root@kurisaw-virtual-machine:/home/kurisaw/Desktop/esp/esp-gitee-tools/esp-matter/connectedhomeip/connectedhomeip/scripts/tools/zap# python3 zap_download.py
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2023-06-19 13:28:22 root INFO Found required zap version to be: v2023.04.27-nightly
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2023-06-19 13:28:22 root INFO Fetching: https://github.com/project-chip/zap/releases/download/v2023.04.27-nightly/zap-linux.zip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2023-06-19 13:29:20 root INFO Data downloaded, extracting ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2023-06-19 13:29:25 root INFO Done extracting.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">ZAP_INSTALL_PATH&lt;/span>&lt;span class="o">=&lt;/span>/home/kurisaw/Desktop/esp/esp-gitee-tools/esp-matter/connectedhomeip/connectedhomeip/.zap/zap-v2023.04.27-nightly
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>Step3：配置zap环境变量&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>我们看上面 zap 安装日志，其中最后导出了zap 的安装路径为&lt;code>/home/kurisaw/Desktop/esp/esp-gitee-tools/esp-matter/connectedhomeip/connectedhomeip/.zap/zap-v2023.04.27-nightly&lt;/code>，在此目录下有个 zap 脚本，我们这个位置一定要记住！！&lt;/p>
&lt;p>设置&lt;code>ZAP_DEVELOPMENT_PATH&lt;/code>环境变量（这里的路径需要根据上面安装zap后提示的路径进行设置，不能一昧照抄）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">ZAP_DEVELOPMENT_PATH&lt;/span>&lt;span class="o">=&lt;/span>/home/kurisaw/Desktop/esp/esp-gitee-tools/esp-matter/connectedhomeip/connectedhomeip/.zap/zap-v2023.04.27-nightly
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;strong>Step4：运行zap引导程序&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>执行如下代码：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./run_zaptool.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>效果如下：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306191346155.png"
loading="lazy"
alt="image-20230619134658521"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Step4：为了方便我们后续使用zap，我们设置root终端下自启动：&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo su
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">vi ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在&lt;code>.bashrc&lt;/code>文件最末添加如下代码，也就是配置zap环境变量&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">ZAP_DEVELOPMENT_PATH&lt;/span>&lt;span class="o">=&lt;/span>/home/kurisaw/Desktop/esp/esp-gitee-tools/esp-matter/connectedhomeip/connectedhomeip/.zap/zap-v2023.04.27-nightly
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>保存退出！&lt;/p>
&lt;h2 id="应用程序构建">应用程序构建
&lt;/h2>&lt;p>在官方文档中提供有两种构建方式：&lt;/p>
&lt;ul>
&lt;li>通过脚本构建&lt;/li>
&lt;li>使用 Gn 和 Ninja 命令构建&lt;/li>
&lt;/ul>
&lt;h3 id="1-通过脚本构建">1. 通过脚本构建
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./build_script.sh EXAMPLE_DIR OUTPUT_DIR &lt;span class="o">[&lt;/span>ARGUMENTS&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>build_script.sh&lt;/code> 是脚本的文件名；&lt;/li>
&lt;li>&lt;code>EXAMPLE_DIR&lt;/code> 是示例项目的目录路径；&lt;/li>
&lt;li>&lt;code>OUTPUT_DIR&lt;/code> 是构建输出的目录路径；&lt;/li>
&lt;li>&lt;code>[ARGUMENTS]&lt;/code> 是可选的其他参数，用于设置gn和ninja命令的选项。&lt;/li>
&lt;/ul>
&lt;h4 id="11-构建示例">1.1 构建示例
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./scripts/examples/gn_build_example.sh examples/placeholder/linux out/debug/simulated/ &lt;span class="nv">chip_tests_zap_config&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="se">\&amp;#34;&lt;/span>app1&lt;span class="se">\&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306190835972.png"
loading="lazy"
alt="image-20230619083551820"
>&lt;/p>
&lt;h4 id="12-运行构建">1.2 运行构建
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">./out/simulated/chip-app1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306190843752.png"
loading="lazy"
alt="image-20230619084309631"
>&lt;/p>
&lt;h3 id="2-通过-gn-和-ninja-构建应用程序">2. 通过 gn 和 ninja 构建应用程序
&lt;/h3>&lt;h4 id="21-构建示例">2.1 构建示例
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> scripts/activate.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn gen --check --root&lt;span class="o">=&lt;/span>examples/placeholder/linux out/simulated --args&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;chip_tests_zap_config=\&amp;#34;app1\&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ninja -C out/simulated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="22-运行构建">2.2 运行构建
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./out/app1/chip-app1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306191510937.png"
loading="lazy"
alt="image-20230619151054483"
>&lt;/p>
&lt;h2 id="测试应用程序">测试应用程序
&lt;/h2>&lt;p>在前面的应用程序构建那一节中我们已经完成了应用程序的构建并且成功运行了构建，同时我们在日志中也可以看到生成了QR码的链接，我们将其复制到浏览器打开即可得到二维码&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306191513515.png"
loading="lazy"
alt="image-20230619151353417"
>&lt;/p>
&lt;p>我们使用chip tool结合生成的QR码进行调试，重新打开一个终端，使用默认的chip tool工具（记住不是之前构建应用程序生成的chip tool），通过QR码可以快捷迅速地将虚拟设备添加到网络中，我们使用chip tool对设备进行调试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> out/debug
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./chip-tool onoff on 0x654321 &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./chip-tool onoff off 0x654321 &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./chip-tool onoff &lt;span class="nb">read&lt;/span> accepted-command-list 0x654321 &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./chip-tool onoff &lt;span class="nb">read&lt;/span> on-time 0x654321 &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306191530858.png"
loading="lazy"
alt="image-20230619153015727"
>&lt;/p>
&lt;p>具体更多的使用命令可参考：&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/examples/chip-tool/README.md" target="_blank" rel="noopener"
>Chip tool&lt;/a>&lt;/p>
&lt;hr>
&lt;h2 id="参考">参考
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/simulated_device_linux.md" target="_blank" rel="noopener"
>simulated_device_linux&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/zap" target="_blank" rel="noopener"
>zap&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>【Matter】Matter学习笔记1</title><link>https://kurisaw.github.io/p/mattermatter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</link><pubDate>Wed, 14 Jun 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/mattermatter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</guid><description>&lt;img src="https://kurisaw.github.io/p/mattermatter%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/cover.jpg" alt="Featured image of post 【Matter】Matter学习笔记1" />&lt;h1 id="matter学习笔记1">Matter学习笔记1
&lt;/h1>&lt;hr>
&lt;p>在了解Matter之前，可以选择先了解以下前提知识：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/qq_42860989/article/details/118389957" target="_blank" rel="noopener"
>matter网络基础之—Thread&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/qq_42860989/article/details/118553988" target="_blank" rel="noopener"
>matter网络基础之—Wi-Fi&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/qq_42860989/article/details/119253287" target="_blank" rel="noopener"
>边界路由器，网关和Wi-Fi接入点&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.csdn.net/qq_42860989/article/details/120067170" target="_blank" rel="noopener"
>Thread地址(IPv6 and RLOC16)&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>以上资料来自CSDN博主：&lt;a class="link" href="https://blog.csdn.net/qq_42860989" target="_blank" rel="noopener"
>Eagle115&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="前言">前言
&lt;/h2>&lt;p>近日，CSA联盟（Connectivity Standards Alliance)正式对外发布了Matter 1.0 标准，并宣布认证计划现已开放。这意味着智能家居品牌可以对其产品进行相关测试和认证，一旦获得认证，公司就可以开始销售带有Matter 标志的设备。&lt;/p>
&lt;p>Matter 最初的项目名称是Project Chip(CHIP)，目前由 CSA联盟维护。它是一个&lt;strong>统一标准的物联网通信协议，旨在将繁杂的智能家居设备收归到统一的通信标准&lt;/strong>。&lt;/p>
&lt;p>Matter 作为一个&lt;strong>应用级的协议&lt;/strong>，向下屏蔽了&lt;strong>设备制造商的生态和系统，让各种智能家居设备之间能相互通信&lt;/strong>。例如，一个 Matter 认证的智能灯泡可以由另一个厂家生产的同样经过认证的设备来控制。Matter 是基于ip的协议，支持wifi、 Thread、 Internet三种不同的底层协议栈。&lt;/p>
&lt;p>Matter 采用不同的通讯协议和技术为未来智能家居行业提供了不同场景下的解决方案：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>低功耗蓝牙技术&lt;/strong>：低功耗蓝牙作为一种专门设计用于低功耗设备之间通信的无线通信技术，它可以在较低的功率下实现较长的通信距离，因此非常适合用于智能家居设备之间的连接。Matter 使用低功耗蓝牙技术进行设备之间的连接和控制。&lt;/li>
&lt;li>&lt;strong>二维码进行配置&lt;/strong>：二维码是一种快速扫描的图形码，可以用于快速识别设备身份和配置设备。在 Matter 中，用户可以扫描设备上的二维码，以快速将设备添加到智能家居网络中，而无需手动输入复杂的网络配置信息。&lt;/li>
&lt;li>&lt;strong>Wi-Fi 技术进行高速数据传输&lt;/strong>：Wi-Fi 技术是一种通信技术，可以提供高速的无线网络连接，因此非常适合用于传输大量数据，例如高清视频和音频数据。在 Matter 中，设备可以通过 Wi-Fi 进行高速数据传输，以实现高质量的音视频体验。&lt;/li>
&lt;li>&lt;strong>Thread 协议进行低速数据传输&lt;/strong>：Thread 协议是一种低功耗、安全、可靠的无线通信协议，它适用于智能家居设备之间的低速数据传输。在 Matter 中，设备可以使用 Thread 协议进行低速数据传输，例如传输传感器数据、控制指令等。&lt;/li>
&lt;/ul>
&lt;h2 id="matter协议架构">Matter协议架构
&lt;/h2>&lt;h3 id="1matter-over-ipv6">1.Matter Over IPV6
&lt;/h3>&lt;p>该标准建立在一个共同的信念之上，即智能家居设备应该安全、可靠且无缝使用。通过建立在互联网协议 (IP) 之上，Matter 支持智能家居设备、移动应用程序和云服务之间的通信，并为设备认证定义了一组特定的基于 IP 的网络技术。&lt;/p>
&lt;p>IPv6（Internet Protocol version 6）是互联网协议的一种，它是 IPv4 协议的后继者，当然并不是说这是一种全新的技术，更多的可以看作是IPV4 协议的扩展。IPv6 提供了更大的地址空间（128位）、更好的安全性（引入IPsec协议作为默认选项）、更高的性能和更多的扩展性，是未来互联网发展的重要基础。&lt;/p>
&lt;p>下面是IPV4 和 IPV6 的一些区别：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">区别&lt;/th>
&lt;th style="text-align:center">IPV4&lt;/th>
&lt;th style="text-align:center">IPV6&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">地址长度&lt;/td>
&lt;td style="text-align:center">32 bits&lt;/td>
&lt;td style="text-align:center">128 bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">地址数量&lt;/td>
&lt;td style="text-align:center">约&lt;strong>4x10^9&lt;/strong>&lt;/td>
&lt;td style="text-align:center">约&lt;strong>3.4×10^38&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">地址类型&lt;/td>
&lt;td style="text-align:center">公网地址和私有地址&lt;/td>
&lt;td style="text-align:center">全局地址和本地地址&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">地址分配方式&lt;/td>
&lt;td style="text-align:center">静态地址和动态地址&lt;/td>
&lt;td style="text-align:center">通过 DHCPv6 动态分配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">安全性&lt;/td>
&lt;td style="text-align:center">IPsec(Internet协议安全标准) 为可选项&lt;/td>
&lt;td style="text-align:center">IPsec 为默认选项&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&amp;mdash;&lt;/td>
&lt;td style="text-align:center">&amp;mdash;&lt;/td>
&lt;td style="text-align:center">&amp;mdash;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="2matter协议架构">2.Matter协议架构
&lt;/h3>&lt;p>Matter 旨在为智能家居设备构建一个通用的基于 IPv6 的通信协议。该协议定义了将部署在设备上的应用层和不同的链路层，以帮助维护互操作性。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306121952614.png"
loading="lazy"
>&lt;/p>
&lt;p>为了解决网络通信壁垒，Matter网络层本身基于 IPV6，因此&lt;strong>天生具备IP连接能力&lt;/strong>，可以与WIFI、Thread、以太网等通讯协议配合使用，而蓝牙则仅在配网过程使用；&lt;/p>
&lt;p>Matter 还支持&lt;strong>桥接&lt;/strong>等其他智能家居技术（例如 Zigbee、Bluetooth Mesh 和 Z-Wave）。这也就意味着，基于这些协议的设备可以像使用 Matter 设备一样运行&lt;strong>Bridge&lt;/strong>；&lt;/p>
&lt;p>由于Matter是基于应用层的协议，也就是说在未来即便有新的网络层协议的出现，Matter也可以很方便的兼容和支持到新协议，从长远发展来看具有很好的前瞻性！&lt;/p>
&lt;h3 id="3matter标准协议架构">3.Matter标准协议架构
&lt;/h3>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306121138795.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;strong>Matter标准协议架构总体流程分析：&lt;/strong>&lt;/p>
&lt;p>首先使用Interaction Model构建一个Action；在Action Framing这一层中，该Action会被序列化为一份指定的压缩二进制格式，表示可以在设备上执行设备交互的一组操作；处理后的Action帧通过Security层进行加密和签名处理，确保通信双方信息传输的机密性和可靠性；当Action经过序列化、加密和签名后，Message Layer会指定一份必选及可选的头字段构造Payload格式，其中头字段中包含了规定消息的属性及一些逻辑路由信息；当payload被 Message Layer 层构造后, 会使用基于IP的数据传输协议 (TCP协议或Matter的消息可靠协议&lt;a class="link" href="" >Message Reliability Protocol&lt;/a>)；一旦对方设备收到数据后，数据流则沿着协议栈向上移动，即各个层反转发送方对数据执行的操作，最终将消息传递给应用程序。&lt;/p>
&lt;p>后面我们会重点讲解设备数据模型（Data Model）和互动模型（Interaction Model），这两部分是Matter互联互通的前提！&lt;/p>
&lt;h2 id="matter网络拓扑结构">Matter网络拓扑结构
&lt;/h2>&lt;p>原理上，任何支持IPV6协议的网络都可以部署Matter，我们重点关注三种链路层技术：以太网（Ethernet）、WIFI和 Thread。&lt;/p>
&lt;p>在 Matter 协议中，Matter将网络视为共享资源，它不规定独占网络的所有权或访问权。因此我们可以在同一组成IP的网络下覆盖多个Matter网络。&lt;/p>
&lt;p>Matter协议还可以在没有公网IPv6基础设施的情况下运行，经资料查询得知，主要是因为&lt;strong>Matter协议也支持Thread网络协议，其底层是基于IEEE 802.15.4的，并使用了6LoWPAN作为IPv6的适配层&lt;/strong>。而 &lt;strong>6LoWPAN协议&lt;/strong> 提供了一种在低功耗无线传感器网络中使用IPv6的方法，它可以将IPv6数据包压缩到非常小的尺寸，从而使得这些数据包可以在不需要较大的IP地址空间的情况下传输。这使得Matter设备可以使用私有IPv6地址而不需要公共IPv6地址，因此不需要依赖公网IPv6基础设施。&lt;/p>
&lt;p>因此，Matter协议不需要依赖公网IPv6基础设施，也不需要依赖互联网服务提供商的支持，可以在与公网断开连接或有防火墙的网络中操作，这使得它可以在更广泛的场景下进行部署和使用。&lt;/p>
&lt;h3 id="mesh组网">Mesh组网
&lt;/h3>&lt;p>在了解Matter网络拓扑结构之前，我们可以先来了解下 Mesh 组网。&lt;/p>
&lt;p>目前最流行的全屋WiFi方案主要有两种：&lt;strong>Mesh路由器组网&lt;/strong>和&lt;strong>AC+AP&lt;/strong>两种方案。而Mesh路由器组网由于其实惠的价格和较为稳定的链路连接性能以及安装的简便性，目前在全屋智能网络的选择还是比较热门的。&lt;/p>
&lt;p>无线Mesh网络是一种新无线局域网类型，与传统WLAN不同的是，&lt;strong>无线Mesh网络&lt;/strong>中的&lt;strong>AP&lt;/strong>可以采用&lt;strong>无线连接&lt;/strong>的方式进行互连，并且&lt;strong>AP间可以建立多跳的无线链路&lt;/strong>。简单来说，就是当WIFI覆盖不了的时候，在有WIFI信号的时候放置一个路由器，可以作为Mesh路由的中继节点，透过这个节点，将WIFI信号覆盖到所有需要覆盖的地方；是一个动态的可以不断扩展的网络架构，任意的WIFI节点设备均可以保持无线互联。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306132314987.png"
loading="lazy"
alt="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306132314987.png"
>&lt;/p>
&lt;p>这个很直观的体现就是大学里每层走廊中间都会架设一台路由，而你每移动一个楼层，你手机的校园网都会重新连接，也就是手机信号会快速自动重连距离你最近的一台路由，这就构成了一个庞大的无线链路网络。下面我们再来了解下Matter 的网络拓扑结构主要分为单一网络拓扑和星形网络拓扑：&lt;/p>
&lt;h3 id="1单一网络拓扑">1.单一网络拓扑
&lt;/h3>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306121601076.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306121516744.png"
loading="lazy"
>&lt;/p>
&lt;p>在单一网络拓扑中，所有的 Matter 设备都连接到一个单一的逻辑网络。 它可以是&lt;strong>Thread/802.15.4网络&lt;/strong>、&lt;strong>Wi-Fi网络&lt;/strong>或&lt;strong>以太网网络&lt;/strong>。在 Wi-Fi/以太网的情况下，网络实际上可以跨越多个Wi-Fi和/或以太网段，&lt;strong>前提是所有段都在链路层桥接&lt;/strong>。 节点(Node)是Fabric中的 Matter设备的单个实例，可在IP网络上运行。&lt;/p>
&lt;p>在单一网络拓扑中的每个节点都通过单个网络接口与Fabric中的每个其他节点进行通信。&lt;/p>
&lt;p>在Matter 中，分属不同网络的设备可以进行同端通信，这也就意味着一个WIFI设备可以和一个Thread进行相互的信息转发，而Matter则扮演了一个虚拟网络的身份，并称其为&lt;strong>Fabric&lt;/strong>。&lt;/p>
&lt;blockquote>
&lt;p>注：Fabric是共享同一个Trusted Root的Matter设备的集合。Matter中Trusted Root作为根CA，颁发NOC证书，识别节点身份。在一个Fabric内，每个节点都有一个唯一标识Node ID。Fabric作为一个命名空间来管理所有权，在Fabric范围内使用标识符确保资源的分配和选择的唯一性。&lt;/p>
&lt;/blockquote>
&lt;h3 id="2星形网络拓扑">2.星形网络拓扑
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>AP(Access Point)&lt;/strong>：WI-FI无线接入点，AP 负责向 STA 提供 Wi-Fi 信号，并提供连接互联网的网络服务。&lt;/li>
&lt;li>&lt;strong>STA(Station)&lt;/strong>：STA 是 Wi-Fi 中的无线客户端，即 Station。STA 可以是智能手机、平板电脑、笔记本电脑等各种设备，它们可以通过 Wi-Fi 连接到无线接入点，访问互联网或者局域网中的资源。&lt;/li>
&lt;li>&lt;strong>BR(Border Router)&lt;/strong>：指的是边界路由器，BR 是一种网络设备，可以连接两个或多个 IP 子网，并将它们转换为同一个 Thread 网络，使得不同子网中的设备可以互相通信。BR 是 Thread 网络中的核心设备之一，通常由路由器或者网关设备提供。&lt;/li>
&lt;li>&lt;strong>ED(End device)&lt;/strong>：指的是终端设备，ED 是 Thread 网络中的客户端设备，如智能手机、平板电脑、笔记本电脑等。ED 可以直接连接到 BR 或者 R，也可以通过其他设备中继进行通信。&lt;/li>
&lt;li>&lt;strong>R(Router)&lt;/strong>：指的是内部路由器。R 是一种网络设备，可以连接多个 ED 和其他 R，负责在 Thread 网络中进行路由选择和数据转发。&lt;/li>
&lt;li>&lt;strong>SED(Sleepy End Device)&lt;/strong>：指的是低功耗终端设备。SED 是一种特殊的终端设备，通常采用低功耗的无线技术，可以在不需要进行通信时进入睡眠模式，从而延长电池寿命。SED 可以直接连接到 BR 或者 R，也可以通过其他设备中继进行通信。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306121605090.png"
loading="lazy"
>&lt;/p>
&lt;p>星形网络拓扑由多个外围网络组成，这些网络通过Hub连接在一起。Hub通常是客户家庭网络（Wi-Fi/以太网）中的设备，而外围网络可以是任何支持的网络类型。&lt;strong>外围网络必须始终通过一个或多个边界路由器(Border Router)直接连接到Hub。&lt;/strong>&lt;/p>
&lt;p>在架构上，任何数量的外围网络可以存在于单个Fabric中，包括相同类型的多个网络。节点可以具有到任何网络（Hub或外围设备）的接口，并且可以直接与同一网络上的其他节点通信。然而，任何必须跨越网络边界才能到达目的地的通信必须通过边界路由器(Border Router)。&lt;/p>
&lt;p>该协议对边界路由器提出了一系列要求。这些要求涉及地址分配、路由分配和广播、多播支持和代理发现。&lt;/p>
&lt;blockquote>
&lt;p>注：在现Matter1.0版本规范中，Thread是主要支持的LLN（Low-Power and Lossy Network）。在许多情况下，客户安装将尝试维护一简单的网络拓扑，包括一个Wi-Fi/以太网子网和一个单Thread网络。但是，可以支持多个Thread网络。&lt;/p>
&lt;/blockquote>
&lt;h2 id="设备数据模型date-model">设备数据模型（Date Model）
&lt;/h2>&lt;p>在 Matter 中的设备具有明确定义的&lt;strong>数据模型&lt;/strong> (&lt;strong>DM&lt;/strong>)，这是对设备功能的分层建模。在此层次结构的顶层，有一个&lt;strong>Device&lt;/strong>。&lt;/p>
&lt;h3 id="1设备和端点nodeendpoint">1.设备和端点（Node、Endpoint）
&lt;/h3>&lt;p>所有设备（包括智能手机和家居助理）均由**Node（节点）**组成。“节点”是网络中可以标识为唯一且可寻址的资源，用户可以感知到整个功能。Matter 中的网络通信始于和终止节点。&lt;/p>
&lt;p>一组节点包含了多组&lt;strong>Endpoint（端点）&lt;/strong>。&lt;strong>而每个端点都封装了一个功能集&lt;/strong>。例如，端点1可能涉及照明功能，而端点2可能涉及移动侦测，以及其他与实用程序（例如设备 OTA）的处理方式。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306122042737.png"
loading="lazy"
>&lt;/p>
&lt;h3 id="2节点角色node-roles">2.节点角色（Node roles）
&lt;/h3>&lt;p>在Matter 中，每一个物理设备都被称之为&lt;strong>Node&lt;/strong>，Node 使用**Node ID（64bit）**来进行表示，在Fabric范围内是唯一的！&lt;/p>
&lt;p>&lt;strong>Node roles&lt;/strong>是一组相关的行为。每个节点可能有一个或多个role。Node roles 包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Commissioner ：执行&lt;/strong>&lt;a class="link" href="https://developers.home.google.com/matter/primer/commissioning" target="_blank" rel="noopener"
>调试&lt;/a>的节点 。&lt;/li>
&lt;li>&lt;strong>控制器&lt;/strong>：可以控制一个或多个节点的节点。例子包括Google Home app (GHA), Google Assistant, 和Google Nest Hub (2nd gen). 某些设备类型（例如&lt;a class="link" href="https://developers.home.google.com/matter/supported-devices#onoff_light_switches" target="_blank" rel="noopener"
>开/关灯开关&lt;/a>）具有控制器角色。&lt;/li>
&lt;li>&lt;strong>Controlee&lt;/strong> : 可以被一个或多个节点控制的节点。大多数设备类型都可以是 Controlee，除了一些具有 Controller 角色的设备类型，例如&lt;a class="link" href="https://developers.home.google.com/matter/supported-devices#onoff_light_switches" target="_blank" rel="noopener"
>On/Off Light Switch&lt;/a>。开/关灯开关只能&lt;em>是&lt;/em>控制器。它不能是受控人。&lt;/li>
&lt;li>&lt;strong>OTA Provider&lt;/strong> : 可以提供 OTA 软件更新的节点。&lt;/li>
&lt;li>&lt;strong>OTA 请求者&lt;/strong>：可以请求 OTA 软件更新的节点。&lt;/li>
&lt;/ul>
&lt;h3 id="3集群cluster">3.集群（Cluster）
&lt;/h3>&lt;p>在一个&lt;strong>Endpoint&lt;/strong>中，一个 Node 有一个或多个&lt;strong>Clusters&lt;/strong>。这些是设备层次结构中的另一个步骤，因为它们将特定功能分组，例如 智能插头上的&lt;em>开/关&lt;/em>集群，或可调光端点上的&lt;em>电平控制集群。&lt;/em>&lt;/p>
&lt;p>一个节点也可能有多个端点，每个端点都创建一个具有相同功能的实例。例如，灯具可能会暴露对单个灯的独立控制，或者电源板可能会暴露对单个插座的控制。&lt;/p>
&lt;h4 id="31-属性attributes">3.1 属性（Attributes）
&lt;/h4>&lt;p>在最后一层，我们会找到&lt;strong>Attributes&lt;/strong>，这是节点持有的状态，表示可以读取或写入的内容，支持多种数据格式，实际中代表了智能设备的相关属性(如门的开关、室内温度等)。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306122111729.png"
loading="lazy"
>&lt;/p>
&lt;h4 id="32-命令commands">3.2 命令（Commands）
&lt;/h4>&lt;p>除了 Attributes 之外，Clusters 还有&lt;strong>Commands&lt;/strong>，也就是&lt;strong>触发 Cluster 进行某种行为的指令&lt;/strong>。它们等同于Matter远程过程调用的 DM。命令类似于&lt;em>动词&lt;/em>，例如&lt;em>Door Lock&lt;/em>集群上的 &lt;em>lock door&lt;/em>。命令可能会产生响应和结果；在 Matter，这样的响应也被定义为命令，以相反的方向进行。&lt;/p>
&lt;h4 id="33-事件events">3.3 事件（Events）
&lt;/h4>&lt;p>最后，Clusters 也可能有&lt;strong>Events&lt;/strong>，它&lt;strong>可以被认为是过去状态转换的记录&lt;/strong>。虽然属性代表&lt;strong>当前状态&lt;/strong>，但事件是&lt;strong>过去&lt;/strong>的日志，包括单调递增的计数器、时间戳和优先级。它们能够捕获状态转换，以及使用属性不容易实现的数据建模。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306122122628.png"
loading="lazy"
>&lt;/p>
&lt;p>&lt;code>Endpoint 0&lt;/code>作为&lt;code>Utility Clusters&lt;/code>&lt;strong>保留。Utility Clusters 是特定的集群，它包含端点上的服务功能，例如发现、寻址、诊断和软件更新&lt;/strong>。另一方面，**Application(应用集群)**支持主要操作，例如开/关或温度测量。&lt;/p>
&lt;h3 id="4-cluster分类">4. Cluster分类
&lt;/h3>&lt;p>cluster可以定义为&lt;strong>工具(Utility) Cluster&lt;/strong>或&lt;strong>应用(Application) Cluster&lt;/strong>。&lt;/p>
&lt;h4 id="41-工具utility-cluster">4.1 工具(Utility) Cluster
&lt;/h4>&lt;p>工具cluster不是端点的主要应用程序操作的一部分。它可以用于配置、发现、寻址、诊断、监控设备运行状况、软件更新等。它可能与对应的cluster存在临时关系。&lt;/p>
&lt;blockquote>
&lt;p>作用域为端点的工具cluster示例:标识符、描述符、绑定、组等。 适用于该节点的工具cluster
示例:基本信息、诊断等。&lt;/p>
&lt;/blockquote>
&lt;h4 id="42-应用application-cluster">4.2 应用(Application) Cluster
&lt;/h4>&lt;p>应用cluster支持端点的主要操作。应用cluster可以支持和一个或多个应用程序交互，既包括client也包括server。&lt;/p>
&lt;blockquote>
&lt;p>应用cluster示例:&lt;/p>
&lt;ul>
&lt;li>On/Off cluster —— client向server发送命令&lt;/li>
&lt;li>Temperature Measurement cluster —— server向client报告数据&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>应用程序cluster不是工具cluster，即使它本身可能支持实用的工具功能，如校准、操作模式等。但应用程序cluster规范不应该涉及其应用领域之外的层级和过程。&lt;/p>
&lt;blockquote>
&lt;p>示例：一个特定的温度测量cluster可能存在于不同的设备上，或在不同的网络中，每个设备具有不同的安全与配网机制和/或策略。
示例：commissioning cluster的范围是配网，而不是测温。&lt;/p>
&lt;/blockquote>
&lt;h3 id="5-clients-and-servers">5. Clients and Servers
&lt;/h3>&lt;p>Clusters 可能是&lt;strong>Client Cluster&lt;/strong>或&lt;strong>Server Cluster&lt;/strong>。服务器是&lt;strong>有状态的&lt;/strong>，保存属性、事件和命令；而客户端是 &lt;strong>无状态的&lt;/strong>，其职责是启动与远程服务器集群的&lt;strong>交互&lt;/strong>，从而执行：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>读取&lt;/strong>和&lt;strong>写入&lt;/strong>其远程属性。&lt;/li>
&lt;li>&lt;strong>读取&lt;/strong>其远程事件。&lt;/li>
&lt;li>&lt;strong>调用&lt;/strong>其远程命令。&lt;/li>
&lt;/ul>
&lt;p>虽然 DM 在节点内是分层的，但节点之间的关系不是。Matter中的节点没有&lt;code>controller/peripheral&lt;/code> 或 &lt;code>leader/follower&lt;/code>关系。相反，关系是水平的：任何 Cluster 都可以是&lt;strong>Server&lt;/strong>或&lt;strong>Client&lt;/strong>。因此，&lt;strong>对于不同的集群和功能，节点可能既是服务器又是客户端。&lt;/strong>&lt;/p>
&lt;p>例如，我们可能有两个台灯：&lt;strong>节点 A&lt;/strong>和&lt;strong>节点 B&lt;/strong>。两个节点都实现了一个&lt;em>开/关灯&lt;/em>设备类型。此设备类型包括控制其各自物理光输出的&lt;em>开/关服务器集群。&lt;/em>&lt;/p>
&lt;p>但是，就像典型的台灯一样，我们的物理设备还将包括一个开/关灯 开关设备类型，用于其本地开/关。此设备类型必须实现&lt;em>开/关客户端&lt;/em>集群，以便它可以控制服务器集群。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306122240843.png"
loading="lazy"
>&lt;/p>
&lt;p>在此示例中，节点 A 上的开/关客户端集群正在更改节点 A 和节点 B 上的开/关服务器集群的属性，而节点 B 的客户端集群仅更改节点 B 本身上的服务器集群。&lt;/p>
&lt;p>在下一节中，我们将详细介绍客户端和服务器集群如何交互： &lt;strong>Interaction Model（交互模型）&lt;/strong>。&lt;/p>
&lt;h2 id="交互模型">交互模型
&lt;/h2>&lt;h3 id="1概念">1.概念
&lt;/h3>&lt;p>如果我们不能对节点执行操作，那么节点的数据模型 (DM) 就不相关了。&lt;strong>交互模型&lt;/strong>（&lt;strong>IM&lt;/strong>），定义了一个节点的 DM 与其他节点的 DM 的关系：即 IM 作为 DM 之间通信的通用语言。&lt;/p>
&lt;p>&lt;strong>节点通过以下方式相互交互：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>读取和订阅属性和事件&lt;/li>
&lt;li>写入属性&lt;/li>
&lt;li>调用命令&lt;/li>
&lt;/ul>
&lt;p>每当一个节点与另一个节点建立加密通信序列时，它们就构成了&lt;strong>交互&lt;/strong>关系。&lt;strong>Interactions 可能由一个或多个Transactions组成，而 Transactions 由一个或多个Action组成&lt;/strong>，可以理解为 Node 之间的 IM 级消息。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306140839728.png"
loading="lazy"
>&lt;/p>
&lt;p>Matter 支持多个操作，例如从另一个节点请求属性或事件的读取请求操作，或其响应，报告数据操作，它将信息从服务器返回到客户端。&lt;/p>
&lt;h4 id="11-发起者initiators-和目标targets">1.1 发起者（Initiators ）和目标（Targets）
&lt;/h4>&lt;p>在Matter中，节点的发起目标被称为&lt;strong>发起者（Initiators ）&lt;/strong>，而响应的节点则作为&lt;strong>目标（Target）&lt;/strong>。一般来说，发起者是客户端集群，而目标是客户端集群。&lt;/p>
&lt;h4 id="12-组groups">1.2 组（Groups）
&lt;/h4>&lt;p>在Matter中节点可能隶属于某个组。设备组作为一种机制，主要用于在统一操作中同时寻址并向多个设备发送消息。在一个 Group 中，所有的节点共享同一个 Group ID（16位整型）。&lt;/p>
&lt;p>为了完成组级通信（群播），Matter 利用IPV6 多播消息，并且让所有的组成员都具有相同的多播地址。&lt;/p>
&lt;h4 id="13-路径path">1.3 路径（Path）
&lt;/h4>&lt;p>&lt;strong>当我们想要与属性、事件或命令进行交互时，我们需要为这种交互指定 Path ，也就是属性、事件和命令在节点的数据模型层次结构中的位置。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>注：Path 也可以使用&lt;strong>Groups&lt;/strong>或者**统配交互符（Wildcard Operators）**同时处理多个节点或集群，从而减少操作的数量。&lt;/p>
&lt;/blockquote>
&lt;p>Path这种机制对提高通信的响应能力起到很重要的作用。例如：当用户想要关闭所有灯光，语音助手可以与组内多个灯建立单个的交互，而不是传统的一系列单独的交互。&lt;/p>
&lt;p>Matter Path 使用规范：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">&amp;lt;path&amp;gt; = &amp;lt;node&amp;gt; &amp;lt;endpoint&amp;gt; &amp;lt;cluster&amp;gt; &amp;lt;attribute | event | command&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;path&amp;gt; = &amp;lt;group ID&amp;gt; &amp;lt;cluster&amp;gt; &amp;lt;attribute | event | command&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这些路径构建块中，端点和集群还可能包括用于选择多个节点实例的通配符运算符。&lt;/p>
&lt;h4 id="14-定时和非定时timed--untimed">1.4 定时和非定时（Timed &amp;amp; Untimed）
&lt;/h4>&lt;p>有两种执行写入或调用 Matter 的方式：定时的和非定时的。定时交易为写入/调用动作的发送建立了一个最大的超时。这个超时的目的是为了防止对交易的拦截攻击。它特别适用于对资产进行门禁的设备，如车库开门器和锁。&lt;/p>
&lt;h3 id="2-read-transactions">2. Read Transactions
&lt;/h3>&lt;p>与 Nodes 交互时的第一个用例 Matter是从另一个节点读取的属性，例如来自传感器的温度值。在此类交互中，必须执行的第一个操作是读取请求操作。&lt;/p>
&lt;h4 id="21-读取请求操作read-request-action">2.1 读取请求操作（Read Request Action）
&lt;/h4>&lt;blockquote>
&lt;p>&lt;strong>发起者 -&amp;gt; 目标&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>在此 Action 中，Initiator 会查询 Target 提供的以下请求：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>属性请求&lt;/strong>：零个或多个目标属性的列表。该列表由零个或多个目标请求属性的路径组成。&lt;/li>
&lt;li>&lt;strong>事件请求&lt;/strong>：目标请求事件的零个或多个路径列表。&lt;/li>
&lt;/ul>
&lt;p>目标接收到读取请求操作后，它将使用请求的信息组装一个报告数据操作；当目标接收到读取请求操作后，它将使用请求的信息组装一个报告数据操作。详见下图：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306141108121.png"
loading="lazy"
>&lt;/p>
&lt;h4 id="22-报告请求数据report-data-action">2.2 报告请求数据（Report Data Action）
&lt;/h4>&lt;blockquote>
&lt;p>&lt;strong>目标 -&amp;gt; 发起者&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>在此 Action 中，Target 响应：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>属性报告（Attribute Reports）&lt;/strong>：读取操作请求中请求的零个或多个报告属性的列表。&lt;/li>
&lt;li>&lt;strong>事件报告（Event Reports）&lt;/strong>：零个或多个报告事件的列表。&lt;/li>
&lt;li>&lt;strong>抑制响应（Suppress Response）&lt;/strong>：一个标志，用于确定是否应抑制对此操作的&lt;strong>状态响应。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>订阅 ID（Subscription ID）&lt;/strong>：如果此报告是订阅交易的一部分，它必须包含一个用于识别订阅交易的整数。&lt;/li>
&lt;/ul>
&lt;h4 id="23-状态响应动作status-response-action">2.3 状态响应动作（Status Response Action）
&lt;/h4>&lt;blockquote>
&lt;p>&lt;strong>目标 -&amp;gt; 发起者 -&amp;gt; 目标&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>一旦 Initiator 接收到请求的数据，默认情况下它必须生成一个 Status Response Action。此操作由启动器发送，确认已收到报告的数据。如果设置了 Suppress Status Response 标志，则 Initiator 不得发送 Status Response Action。&lt;/p>
&lt;p>一旦启动器发送了状态响应操作，或者启动器接收到启用了抑制响应标志的报告数据操作，读取/报告查询就完成了。&lt;/p>
&lt;p>状态响应操作仅包含一个&lt;strong>状态字段&lt;/strong>，该字段将确认操作成功或显示失败代码。&lt;/p>
&lt;h3 id="3-subscription-transaction">3. Subscription Transaction
&lt;/h3>&lt;h4 id="31-订阅请求操作subscribe-request-action">3.1 订阅请求操作（Subscribe Request Action）
&lt;/h4>&lt;blockquote>
&lt;p>&lt;strong>发起者 -&amp;gt; 目标&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>除了单一的读请求动作外，发起者还可以订阅属性或事件的定期更新。因此，同样的报告数据 Action 可以作为订阅交易后的定期数据更新的结果而产生。&lt;/p>
&lt;p>订阅交互创建两个节点之间的关系，其中目标定期向发起者生成报告数据操作。 Initiator 是 Subscriber，Target 是 Publisher。&lt;/p>
&lt;p>订阅请求操作包含：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Min Interval Floor（最小间隔层）&lt;/strong>：报告之间的最小间隔。&lt;/li>
&lt;li>&lt;strong>Max Interval Ceiling（最大区间上限）&lt;/strong>：报告之间的最大间隔。&lt;/li>
&lt;li>Attribute Reports（属性报告）：读取操作请求中请求的零个或多个报告属性的列表。&lt;/li>
&lt;li>Event Reports（事件报告）：零个或多个报告事件的列表。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306141332135.png"
loading="lazy"
>&lt;/p>
&lt;p>在订阅请求之后，目标用包含第一批报告数据的报告数据操作响应发起者：&lt;strong>Primed Published Data&lt;/strong>。&lt;/p>
&lt;p>然后，发起者通过发送到目标的状态响应操作来确认报告数据操作。一旦目标接收到一个状态响应动作报告没有错误，它发送一个订阅响应动作。&lt;/p>
&lt;p>目标随后将以协商的间隔定期发送报告数据操作，发起者将响应这些操作，直到订阅丢失或取消。&lt;/p>
&lt;h4 id="32-订阅响应操作subscribe-response-action">3.2 订阅响应操作（Subscribe Response Action）
&lt;/h4>&lt;blockquote>
&lt;p>&lt;strong>目标 -&amp;gt; 发起者&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>这是订阅交易的最后一个操作，并结束了该过程。这包括：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Subscription ID（订阅 ID）&lt;/strong>：标识订阅的整数。&lt;/li>
&lt;li>&lt;strong>Min Interval（最小间隔）&lt;/strong>：最终确定的报告之间的最小间隔。&lt;/li>
&lt;li>&lt;strong>Max Interval（最大间隔）&lt;/strong>：&lt;em>最终&lt;/em>确定&lt;em>的&lt;/em>报告之间的最大间隔。&lt;/li>
&lt;/ul>
&lt;h3 id="4-write-transactions">4. Write Transactions
&lt;/h3>&lt;h4 id="41-不定时写入事务untimed-write-transaction">4.1 不定时写入事务（Untimed Write Transaction）
&lt;/h4>&lt;h5 id="411-写请求操作write-request-action">4.1.1 写请求操作（Write Request Action）
&lt;/h5>&lt;blockquote>
&lt;p>&lt;strong>发起者 -&amp;gt; 目标&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>与读取请求操作类似，在此操作中，发起者为目标提供：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Write Requests（写入请求）&lt;/strong>：包含路径和数据的一个或多个元组的列表。&lt;/li>
&lt;li>&lt;strong>Timed Request（定时请求）&lt;/strong>：一个标志，指示此操作是否是定时写入事务的一部分。&lt;/li>
&lt;li>&lt;strong>Suppress Response（抑制响应）&lt;/strong>：指示是否应抑制响应状态操作的标志。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306141423081.png"
loading="lazy"
>&lt;/p>
&lt;h5 id="412-写响应操作write-response-action">4.1.2 写响应操作（Write Response Action）
&lt;/h5>&lt;blockquote>
&lt;p>&lt;strong>目标 -&amp;gt; 发起者&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;h5 id="413-不定时写入限制untimed-write-restrictions">4.1.3 不定时写入限制（Untimed Write Restrictions）
&lt;/h5>&lt;p>写入请求动作可以是一个组播，但在这种情况下，必须设置抑制响应标志。其理由是，否则网络可能会被来自一个组的每个成员的同时响应所淹没。&lt;/p>
&lt;p>为了启用这种行为，在写请求列表中使用的路径可以包含组，或者它们可以包含通配符，但只在端点字段上。&lt;/p>
&lt;h4 id="42-定时写入事务timed-write-transaction">4.2 定时写入事务（Timed Write Transaction）
&lt;/h4>&lt;p>在定时写入事务中比非定时写入事务多了几个步骤。&lt;/p>
&lt;h5 id="421-定时请求操作timed-request-action">4.2.1 定时请求操作（Timed request action）
&lt;/h5>&lt;blockquote>
&lt;p>&lt;strong>发起者 -&amp;gt; 目标&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>Initiator 启动事务发送此操作，其中包含：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Timeout&lt;/strong>：此事务可以保持打开状态的毫秒数。在此期间，Initiator 发送的下一个动作将被视为有效。&lt;/li>
&lt;/ul>
&lt;p>一旦接收到定时请求操作，目标必须使用状态响应操作确认定时请求操作。一旦 Initiator 收到报告没有错误的 Status Response Action，它将发送 Write Request Action。&lt;/p>
&lt;h5 id="422-写请求操作write-request-action">4.2.2 写请求操作（Write Request Action）
&lt;/h5>&lt;p>与前面描述的 &lt;strong>4.1.1 写请求操作&lt;/strong> 相同。&lt;/p>
&lt;h5 id="423-写响应操作write-response-action">4.2.3 写响应操作（Write Response Action）
&lt;/h5>&lt;p>与前面描述的 &lt;strong>4.1.2 写响应操作&lt;/strong> 相同。&lt;/p>
&lt;h5 id="424-定时写入限制timed-write-restrictions">4.2.4 定时写入限制（Timed Write Restrictions）
&lt;/h5>&lt;p>定时请求动作、写请求动作和写响应动作是单播的。&lt;/p>
&lt;h3 id="5调用事务">5.调用事务
&lt;/h3>&lt;p>&lt;strong>调用事务&lt;/strong>用于在目标节点上调用一个或多个集群命令。它类似于对集群中定义的命令进行的远程过程调用。&lt;/p>
&lt;p>与写入事务类似，调用事务支持定时和不定时事务。 有关定时事务的更多信息，请参阅 &lt;strong>交互模型：1.4.定时和非定时&lt;/strong>&lt;/p>
&lt;h4 id="51-不定时调用事务">5.1 不定时调用事务
&lt;/h4>&lt;h5 id="511-调用请求操作invoke-request-action">5.1.1 调用请求操作（Invoke Request Action）
&lt;/h5>&lt;blockquote>
&lt;p>&lt;strong>发起者 -&amp;gt; 目标&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>类似于读请求动作和写请求动作，在这个动作中，发起者为目标提供：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Invoke Requests（调用请求）：集群命令&lt;/strong>的路径（PATH）列表 ，以及命令的可选参数，名为 &lt;strong>Command Fields&lt;/strong>。&lt;/li>
&lt;li>Timed Request（超时请求）：一个标志，指示此操作是否是定时调用事务的一部分。&lt;/li>
&lt;li>Suppress Response（抑制响应）：指示是否应抑制调用响应操作的标志。&lt;/li>
&lt;li>&lt;strong>Interaction ID&lt;/strong>：一个整数，用于将 Invoke Request Action 与 Invoke Response Action 匹配。&lt;/li>
&lt;/ul>
&lt;h5 id="512-调用响应操作invoke-response-action">5.1.2 调用响应操作（Invoke Response Action）
&lt;/h5>&lt;blockquote>
&lt;p>&lt;strong>目标 -&amp;gt; 发起者&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>目标收到调用请求操作后，它将使用包含以下内容的调用响应操作来完成事务：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Invoke Responses（调用响应）&lt;/strong>：发送的每个调用请求的命令响应或状态列表。&lt;/li>
&lt;li>Interaction ID：一个整数，用于将 Invoke Response Action 与 Invoke Request Action 匹配。&lt;/li>
&lt;/ul>
&lt;h5 id="513-不定时调用限制">5.1.3 不定时调用限制
&lt;/h5>&lt;p>Invoke Request Action可以是一个组播，但在这种情况下，必须设置抑制响应标志。其理由是，否则网络可能会被来自一个组的每个成员的同时响应所淹没。&lt;/p>
&lt;p>为了启用这种行为，在调用请求列表中使用的路径可以包含组，或者它们可以包含通配符，但仅在端点字段上。此外，如果行动是组播，这个事务就会在没有响应的情况下终止。&lt;/p>
&lt;h4 id="52-定时调用事务">5.2 定时调用事务
&lt;/h4>&lt;p>与定时写入事务类似，定时调用事务也从定时请求操作开始。&lt;/p>
&lt;h5 id="521-定时请求操作">5.2.1 定时请求操作
&lt;/h5>&lt;blockquote>
&lt;p>&lt;strong>发起者 -&amp;gt; 目标&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>Initiator 启动事务发送此操作，其中包含：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Timeout&lt;/strong>：此事务可以保持打开状态的毫秒数。在此期间，Initiator 发送的下一个动作将被视为有效。&lt;/li>
&lt;/ul>
&lt;p>一旦接收到定时请求操作，目标必须使用状态响应操作确认定时请求操作。一旦 Initiator 收到状态响应操作报告没有错误，它将发送调用请求操作。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306141539988.png"
loading="lazy"
>&lt;/p>
&lt;h5 id="522-调用请求操作invoke-request-action">5.2.2 调用请求操作（Invoke Request Action）
&lt;/h5>&lt;p>与前面描述的 &lt;strong>5.1.1 调用请求操作&lt;/strong> 相同。&lt;/p>
&lt;h5 id="523-调用响应操作invoke-response-action">5.2.3 调用响应操作（Invoke Response Action）
&lt;/h5>&lt;p>与前面描述的 &lt;strong>5.1.2 调用响应操作&lt;/strong> 相同。&lt;/p>
&lt;h5 id="524-定时调用限制timed-invoke-restrictions">5.2.4 定时调用限制（Timed Invoke Restrictions）
&lt;/h5>&lt;p>所有的调用命令都可以在定时交互中调用。定时请求动作、调用请求动作和调用响应动作都是单播的，因此不能在定时调用事务上作为群播使用。&lt;/p>
&lt;p>Invoke Request Action支持使用带组的路径，以及通配符，但Invoke Response Action不支持通配符的使用。&lt;/p>
&lt;hr>
&lt;h2 id="参考资料">参考资料
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://developers.home.google.com/matter/primer/device-data-model#parts_list" target="_blank" rel="noopener"
>https://developers.home.google.com/matter/primer/device-data-model#parts_list&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.bilibili.com/video/BV1NL411T7Kj/?spm_id_from=333.788&amp;amp;vd_source=40334d7415493efea293dacb3c13f0b4" target="_blank" rel="noopener"
>Matter技术及关键特性介绍&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>【Matter】Nordic-Mattter开发大纲</title><link>https://kurisaw.github.io/p/matternordic-mattter%E5%BC%80%E5%8F%91%E5%A4%A7%E7%BA%B2/</link><pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/matternordic-mattter%E5%BC%80%E5%8F%91%E5%A4%A7%E7%BA%B2/</guid><description>&lt;img src="https://kurisaw.github.io/p/matternordic-mattter%E5%BC%80%E5%8F%91%E5%A4%A7%E7%BA%B2/cover.jpg" alt="Featured image of post 【Matter】Nordic-Mattter开发大纲" />&lt;h2 id="nrf-connect-sdk-支持mattter">nRF Connect SDK 支持Mattter
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/index.html" target="_blank" rel="noopener"
>Nordic提供的Matter用户指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>子页面：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/overview/index.html" target="_blank" rel="noopener"
>Matter概况&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/index.html" target="_blank" rel="noopener"
>开始使用Matter&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/end_product/index.html" target="_blank" rel="noopener"
>如何创建 Matter 最终产品&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="matter网络拓扑结构">Matter网络拓扑结构
&lt;/h2>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306012004778.png"
loading="lazy"
alt="image-20230601200431602"
>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Thread&lt;/code>：Thread是一种开放的低功耗无线通信协议，旨在为物联网设备提供安全、稳定、高效的IPv6连接。它基于IEEE 802.15.4标准，支持多种应用场景，如智能家居、建筑自动化、工业自动化等。Thread协议的特点是易于扩展、安全性高、可靠性好、覆盖范围广、低功耗等。&lt;/li>
&lt;li>&lt;code>WI-FI&lt;/code>：Wi-Fi是一种无线局域网技术，采用IEEE 802.11标准，可以实现高速的无线数据传输。它广泛应用于智能手机、平板电脑、笔记本电脑、智能家居、智能电视等设备中，可以通过无线方式连接互联网和其他设备。Wi-Fi的主要特点是速度快、覆盖范围广、使用方便等。&lt;/li>
&lt;li>&lt;code>Ethernet（以太网）&lt;/code>：Ethernet（以太网）是一种有线局域网技术，采用IEEE 802.3标准，可以通过网线连接设备和网络。它是一种广泛应用于计算机网络中的技术，可以实现高速的数据传输和可靠的网络连接。Ethernet的主要特点是速度快、可靠性高、稳定性好等。&lt;/li>
&lt;li>&lt;code>Matter binding（Matter协议）&lt;/code>：Matter是一个由智能家居设备制造商、芯片厂商和互联网巨头等多个公司发起的开放性联盟，旨在促进智能家居设备之间的互操作性和互连性。Matter协议是该联盟发布的一种通信协议，可以让智能家居设备之间相互通信和交互。Matter协议的特点是开放性强、互操作性好、安全性高、可扩展性强等。Matter binding是指将Matter协议与其他通信协议（如蓝牙、Wi-Fi等）进行绑定，实现智能家居设备之间的互连和互操作。&lt;/li>
&lt;/ul>
&lt;h2 id="硬件平台">硬件平台
&lt;/h2>&lt;p>运行 Matter 协议应用程序的硬件必须满足规范要求，包括提供适量的闪存以及能够同时运行蓝牙 LE 和 Thread 或 Wi-Fi。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/hw_requirements.html" target="_blank" rel="noopener"
>硬件参考&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Nodic nRF52840&lt;/li>
&lt;li>PC: Ubuntu（20.04 或更新版本）&lt;/li>
&lt;li>Raspberry Pi 4（以及内存至少为 8 GB 的 SD 卡）&lt;/li>
&lt;li>支持 IPv6 的 Wi-Fi 接入点（路由器上未启用 IPv6 路由器广告防护）&lt;/li>
&lt;li>RF52840 DK 或 nRF52840 Dongle - 用于无线电协处理器 (RCP) 设备&lt;/li>
&lt;li>兼容 Nordic Semiconductor 的 DK - 用于 Matter 附件设备（与其中一个&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/samples/matter.html#matter-samples" target="_blank" rel="noopener"
>Matter 样本&lt;/a>兼容并编程）&lt;/li>
&lt;/ul>
&lt;h2 id="软件平台">软件平台
&lt;/h2>&lt;p>Linux PC withsoftware installed:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.1.1/nrf/getting_started.html" target="_blank" rel="noopener"
>nRFConnectSDK v2.1.1&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.nordicsemi.com/Products/Development-tools/nrf-command-line-tools/download" target="_blank" rel="noopener"
>nRFCommand-line tools&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://nrfconnect.github.io/vscode-nrf-connect/" target="_blank" rel="noopener"
>Visual Studio Code withnRFConnect ExtensionPack for VS Code &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/ug_thread_tools.html#installing-otbr-manually-raspberry-pi" target="_blank" rel="noopener"
>RaspberryPi 4 runningOpenThreadBorder Router&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="商业matter生态系统测试方式">商业Matter生态系统测试方式
&lt;/h2>&lt;p>对于matter设备在不同协议下的配置和使用，官方提供以下几种方式：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/thread_separate_otbr_linux_macos.html" target="_blank" rel="noopener"
>Matter over Thread：在不同的设备上配置边界路由器和 Linux/macOS 控制器&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/thread_one_otbr.html" target="_blank" rel="noopener"
>Matter over Thread：在一台设备上配置边界路由器和控制器&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/wifi_pc.html" target="_blank" rel="noopener"
>Matter over Wi-Fi：为 Linux 或 macOS 配置 CHIP 工具&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意：这里我们基于&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/thread_one_otbr.html" target="_blank" rel="noopener"
>Matter over Thread：在一台设备上配置边界路由器和控制器&lt;/a>进行过程演示。&lt;/strong>&lt;/p>
&lt;hr>
&lt;h2 id="matter-over-thread在一台设备上配置边界路由器和控制器">Matter over Thread：：在一台设备上配置边界路由器和控制器
&lt;/h2>&lt;p>如果你只有一台设备，无论是装有 Linux 的 PC 还是 Raspberry Pi，你都可以设置和测试 Matter over Thread 开发环境，同时在这台设备上运行 Thread Border Router 和 Matter 控制器。&lt;/p>
&lt;p>在此设置中，PC 或 Raspberry Pi 同时运行 Thread Border Router 和适用于 Linux 或 macOS 的 CHIP 工具。为了简化 Thread 与 Matter 附件设备的通信，使用带有 OpenThread Border Router 图像的 Docker 容器，而不是本地安装 OpenThread Border Router。&lt;/p>
&lt;p>下面是在同一台设备上设置 OpenThread Board Router 和 Matter 控制器的拓扑结构图，我们结合 CHIP TOOL 进行开发&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306052053960.png"
loading="lazy"
alt="image-20230605205336833"
>&lt;/p>
&lt;h3 id="1要求">1.要求
&lt;/h3>&lt;p>若要使用此设置，需要以下硬件：&lt;/p>
&lt;ul>
&lt;li>以下任意之一：
&lt;ul>
&lt;li>1 台装有 Ubuntu 的电脑（20.04 或更高版本）&lt;/li>
&lt;li>1x Raspberry Pi Model 3B+ 或更高版本，配备 Ubuntu（20.04 或更高版本）而不是 Raspbian OS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>1x 蓝牙 LE 加密狗（可以嵌入 PC 内部，就像在树莓派上一样）&lt;/li>
&lt;li>1x nRF52840 DK 或 nRF52840 加密狗 - 用于无线电协处理器 （RCP） 设备&lt;/li>
&lt;li>1x nRF52840 DK 或 nRF5340 DK - 用于物质附件设备（使用&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/samples/matter.html#matter-samples" target="_blank" rel="noopener"
>物质样品&lt;/a>之一进行编程）)&lt;/li>
&lt;/ul>
&lt;h3 id="2配置环境">2.配置环境
&lt;/h3>&lt;p>要在同一设备上配置和使用线程边界路由器和 Matter 控制器，请完成以下步骤。&lt;/p>
&lt;h4 id="step1对样品编程">Step1.对样品编程
&lt;/h4>&lt;p>使用可用的 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/samples/matter.html#matter-samples" target="_blank" rel="noopener"
>Matter 样本&lt;/a>之一对 Matter 附件设备的开发套件进行编程。 我们建议使用&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/samples/matter/light_bulb/README.html#matter-light-bulb-sample" target="_blank" rel="noopener"
>Matter light bulb&lt;/a>。&lt;/p>
&lt;h4 id="step2thread-border-router配置">Step2.Thread Border Router配置
&lt;/h4>&lt;p>在 PC 或树莓派上配置线程边界路由器，具体取决于您使用的硬件。 有关详细步骤，请参阅 nRF Connect SDK 文档中 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/thread/tools.html#ug-thread-tools-tbr" target="_blank" rel="noopener"
>Thread Border Router&lt;/a>页面上的使用 Docker 运行 OTBR 部分。&lt;/p>
&lt;h4 id="step3chip-tool配置">Step3.Chip Tool配置
&lt;/h4>&lt;p>适用于 Linux 或 macOS 的 CHIP Tool 是 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/overview/network_topologies.html#ug-matter-configuring-controller" target="_blank" rel="noopener"
>Matter controller&lt;/a> 角色的默认实现，建议用于 nRF Connect 平台。 对于此线程问题，您将在与线程边界路由器相同的设备上配置控制器。&lt;/p>
&lt;p>完成以下步骤：&lt;/p>
&lt;p>a. 选择以下选项之一：&lt;/p>
&lt;ul>
&lt;li>仅适用于 Linux - 使用 &lt;a class="link" href="https://github.com/nrfconnect/sdk-connectedhomeip/releases" target="_blank" rel="noopener"
>Matter nRF Connect 发布&lt;/a> GitHub 页面中的预构建工具包。 确保程序包与 nRF Connect SDK 版本兼容。&lt;/li>
&lt;li>对于 Linux 和 macOS - 从目录中可用的源文件手动构建它，并使用 Matter 文档中使用 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/matter/chip_tool_guide.html" target="_blank" rel="noopener"
>CHIP TOOL&lt;/a>页面中的构建说明。&lt;code>modules/lib/matter/examples/chip-tool&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>b. 配置芯片工具控制器。 按照 Matter 文档中的使用 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/matter/chip_tool_guide.html" target="_blank" rel="noopener"
>CHIP TOOL&lt;/a>用户指南中的步骤完成以下操作：&lt;/p>
&lt;ul>
&lt;li>通过完成“构建和运行 CHIP 工具”中列出的步骤来构建和运行 CHIP TOOL。&lt;/li>
&lt;li>通过完成“使用 CHIP 工具进行物质设备测试”中列出的步骤来准备测试环境。&lt;/li>
&lt;/ul>
&lt;h4 id="step4例程测试">Step4.例程测试
&lt;/h4>&lt;p>根据您在开发工具包上编程的 Matter 示例，转到对应示例的文档页面并完成“测试”部分中的步骤。&lt;/p>
&lt;h2 id="结语">结语
&lt;/h2>&lt;p>这部分仅作为开发大纲，后面会出一系列系统教程，以&lt;strong>Matter over Thread：：在一台设备上配置边界路由器和控制器&lt;/strong>为例。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=9Ar13rMxGIk&amp;amp;t=554s" target="_blank" rel="noopener"
>Nordic-Matter 演示教学&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/thread_one_otbr.html" target="_blank" rel="noopener"
>Matter over Thread: Configuring Border Router and controller on one device&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>【Matter】使用chip-tool在ESP32-C3上进行matter开发</title><link>https://kurisaw.github.io/p/matter%E4%BD%BF%E7%94%A8chip-tool%E5%9C%A8esp32-c3%E4%B8%8A%E8%BF%9B%E8%A1%8Cmatter%E5%BC%80%E5%8F%91/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/matter%E4%BD%BF%E7%94%A8chip-tool%E5%9C%A8esp32-c3%E4%B8%8A%E8%BF%9B%E8%A1%8Cmatter%E5%BC%80%E5%8F%91/</guid><description>&lt;img src="https://kurisaw.github.io/p/matter%E4%BD%BF%E7%94%A8chip-tool%E5%9C%A8esp32-c3%E4%B8%8A%E8%BF%9B%E8%A1%8Cmatter%E5%BC%80%E5%8F%91/cover.jpg" alt="Featured image of post 【Matter】使用chip-tool在ESP32-C3上进行matter开发" />&lt;h1 id="使用chip-tool在esp32-c3上进行matter开发">使用chip tool在ESP32-C3上进行matter开发
&lt;/h1>&lt;hr>
&lt;h2 id="前提准备">前提准备
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>请确保你已经能够完成在esp-matter下的应用程序的烧录及串口监视，可参考此博客&lt;a class="link" href="https://blog.csdn.net/qq_56914146/article/details/130519043?spm=1001.2014.3001.5501" target="_blank" rel="noopener"
>【Matter】esp-matter环境下的应用实践（程序烧录及串口监视）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ubuntu最好使用20以上的版本，因为matter最低需要python3.8的环境&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PC机需要支持蓝牙4.0及以上版本，如果没有的话需要购买一个USB蓝牙适配器，而且需要支持Linux，可以参考购买这款&lt;a class="link" href="https://m.tb.cn/h.UvoJzj4?tk=KpYpdNFRueB" target="_blank" rel="noopener"
>蓝牙适配器&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="编译-chip-tool">编译 chip-tool
&lt;/h2>&lt;h3 id="1激活esp-matter环境">1.激活esp-matter环境
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">idf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2编译matter所需环境">2.编译matter所需环境
&lt;/h3>&lt;ul>
&lt;li>step1：首先安装编译所需的依赖包：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get install git gcc g++ pkg-config libssl-dev libdbus-1-dev libglib2.0-dev libavahi-client-dev ninja-build python3-venv python3-dev python3-pip unzip libgirepository1.0-dev libcairo2-dev libreadline-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step2：切换到 /matter/connectedhomeip/connectedhomeip 目录下，编译matter环境（如果没显示环境过期，这一步可跳过）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 运行引导程序，该脚本负责下载 GN、ninja，并使用用于构建和测试的库设置 Python 环境。如果此脚本显示环境已过期，则可以通过运行以下命令进行更新&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> scripts/bootstrap.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>对于 MacOS，&lt;code>gdbgui&lt;/code>python 包不会使用&lt;code>bootstrap.sh&lt;/code> 脚本安装，因为它仅限于 x64 Linux 平台。它受到限制，因为在 MacOS 上为&lt;code>gevent&lt;/code>（依赖于&lt;code>gdbgui&lt;/code>）构建轮子失败。&lt;/p>
&lt;p>对于ARM-based Mac，如果Python3版本大于或等于3.11，则不需要进一步的安装步骤。&lt;/p>
&lt;p>如果 Python3 版本低于 3.11 或者您使用的是 x86（基于英特尔）Mac，那么请在每次引导后运行以下命令以将 gdbgui wheels 安装为二进制文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">python3&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="n">scripts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">setup&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">constraints&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">no&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">cache&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">prefer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">binary&lt;/span> &lt;span class="n">gdbgui&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mf">0.13&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mf">2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">deactivate&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;ul>
&lt;li>step3：激活编译matter环境&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">source&lt;/span> &lt;span class="n">scripts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">activate&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step4：启用 Ccache 以加快 IDF 构建速度&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="err">$&lt;/span> &lt;span class="n">export&lt;/span> &lt;span class="n">IDF_CCACHE_ENABLE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3构建chip-tool">3.构建CHIP TOOL
&lt;/h3>&lt;p>在 &lt;code>~/esp/esp-matter/connectedhomeip/connectedhomeip&lt;/code>目录下，执行命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">./gn_build.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041738527.png"
loading="lazy"
alt="image-20230504173815084"
>&lt;/p>
&lt;p>执行完之后，会在根目录下生成 &lt;code>out/debug/standalone/chip-tool&lt;/code>一个二进制文件。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041740040.png"
loading="lazy"
alt="image-20230504174038993"
>&lt;/p>
&lt;p>如果上述命令：&lt;code>./gn_build.sh&lt;/code>执行失败，也可以执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">scripts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">examples&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">gn_build_example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span> &lt;span class="n">examples&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">SOME&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">PATH&lt;/span>&lt;span class="o">/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041756762.png"
loading="lazy"
alt="image-20230504175634584"
>&lt;/p>
&lt;p>执行完毕后，在以下路径 &lt;code>connetedhomeip/connectedhomeip/SOME-PATH&lt;/code>也可以发现生成了 chip-tool 工具&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041757853.png"
loading="lazy"
alt="image-20230504175700807"
>&lt;/p>
&lt;h2 id="chip-tool-client-调试设备说明">chip-tool client 调试设备说明
&lt;/h2>&lt;p>为了向设备发送命令，必须使用客户端对其进行调试。芯片工具目前&lt;strong>一次只支持调试和记忆一个设备&lt;/strong>。配置状态存储在/tmp/chip_tool_config.ini中；&lt;/p>
&lt;p>另外删除/tmp中的此文件和其他.ini文件有时可以解决由于过时配置导致的问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 获取受支持集群的列表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">Usage&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">cluster_name&lt;/span> &lt;span class="n">command_name&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">param1&lt;/span> &lt;span class="n">param2&lt;/span> &lt;span class="p">...]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+-------------------------------------------------------------------------------------+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="nl">Clusters&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+-------------------------------------------------------------------------------------+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">barriercontrol&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">basic&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">colorcontrol&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">doorlock&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">groups&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">iaszone&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">identify&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">levelcontrol&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">onoff&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">payload&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">scenes&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">temperaturemeasurement&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+-------------------------------------------------------------------------------------+&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041800372.png"
loading="lazy"
alt="image-20230504180042312"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>有关具体其他命令和使用方法详见 : &lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/v1.0-branch/examples/chip-tool" target="_blank" rel="noopener"
>https://github.com/project-chip/connectedhomeip/tree/v1.0-branch/examples/chip-tool&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>要向设备发起客户端调试请求，需要运行构建的可执行文件并选择配对模式，具体操作如下：&lt;/p>
&lt;h3 id="1基于-ble-调试">1.基于 BLE 调试
&lt;/h3>&lt;p>运行构建的可执行文件并将远程设备的鉴别器和配对代码以及要使用的网络凭据传递给它。下面的命令使用硬编码到 ESP32 all-clusters-app 调试版本中的默认值来将其调试到 Wi-Fi 网络：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">ble&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">wifi&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">SSID&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">PASSWORD&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">20202021&lt;/span> &lt;span class="mi">3840&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>${NODE_ID_TO_ASSIGN}&lt;/code>（必须是十进制数或&lt;code>0x&lt;/code>- 前缀的十六进制数）是要分配给正在调试的节点的节点 ID。&lt;/li>
&lt;li>&lt;code>${SSID} 是 Wi-Fi SSID&lt;/code> 可以是字符串，也可以是&lt;code>hex:XXXXXXXX&lt;/code> SSID 的字节被编码为两位十六进制数字的形式。&lt;/li>
&lt;li>&lt;code>${PASSWORD}&lt;/code> 是 Wi-Fi 密码，同样是字符串或十六进制数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 例如
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">ble&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">wifi&lt;/span> &lt;span class="mh">0x7283&lt;/span> &lt;span class="n">jetbot&lt;/span> &lt;span class="n">jetbotwyq&lt;/span> &lt;span class="mi">202021&lt;/span> &lt;span class="mi">3840&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2通过ip与设备配对">2.通过IP与设备配对
&lt;/h3>&lt;p>下面的命令将发现设备并尝试使用提供的设置代码与它发现的第一个设备配对。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">onnetwork&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">20202021&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令将发现具有长鉴别器 3840 的设备，并尝试使用提供的设置代码与它发现的第一个设备配对。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">onnetwork&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">long&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">20202021&lt;/span> &lt;span class="mi">3840&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令将根据给定的二维码（哪些设备在启动时记录）发现设备，并尝试与它发现的第一个配对。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">code&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">MT&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">#######&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在所有这些情况下，将为设备分配节点 ID &lt;code>${NODE_ID_TO_ASSIGN}&lt;/code> （必须是十进制数或以 0x 为前缀的十六进制数）。&lt;/p>
&lt;h3 id="3trust-store">3.Trust store
&lt;/h3>&lt;p>Trust store 将使用默认的 Test Attestation PAA 自动创建。要使用不同的 PAA 集，请在运行构建的可执行文件时使用可选参数 &amp;ndash;paa-trust-store-path 传递路径。受信任的 PAA 位于 credentials/development/paa-root-certs/。&lt;/p>
&lt;p>下面的命令将选择一组受信任的 PAA，以在证明验证期间使用。它还会发现具有长鉴别器 3840 的设备，并尝试使用提供的设置代码与它发现的第一个设备配对。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">onnetwork&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">long&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">20202021&lt;/span> &lt;span class="mi">3840&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">paa&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">trust&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">store&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">PAAs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4忘记当前委托的设备">4.忘记当前委托的设备
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">unpair&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用chip-tool点灯">使用chip-tool点灯
&lt;/h2>&lt;h3 id="1matter环境激活">1.matter环境激活
&lt;/h3>&lt;p>由于每次配置的 esp-idf 和 esp-matter 环境激活仅在当前终端有效，这里我们编写一个脚本文件，每次打开一个终端执行此脚本即可完成matter环境的激活：&lt;/p>
&lt;ul>
&lt;li>step1：新建一个名为 matter.sh 的脚本文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vi&lt;/span> &lt;span class="n">matter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step2：复制以下内容到 matter.sh&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># matter.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">EPS_MATTER_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/home/kurisaw/Desktop/esp/esp-gitee-tools/esp-matter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">eq&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">];&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">export&lt;/span> &lt;span class="n">IDF_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/home/kurisaw/Desktop/esp/esp-gitee-tools/esp-idf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">source&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">kurisaw&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Desktop&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">gitee&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tools&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">idf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">source&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">EPS_MATTER_PATH&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">export&lt;/span> &lt;span class="n">IDF_CCACHE_ENABLE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">echo&lt;/span> &lt;span class="s">&amp;#34;enter matter dir&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cd&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">EPS_MATTER_PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step3：执行脚本以激活 matter 环境&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">source&lt;/span> &lt;span class="n">matter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2固件烧录">2.固件烧录
&lt;/h3>&lt;ul>
&lt;li>打开一个新的&lt;strong>终端1&lt;/strong>，进入示例目录设置并编译烧写到评估板运行&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">examples&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">light&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>设置要构建的 Matter 目标&lt;/li>
&lt;li>目前所有示例应用程序都支持目标芯片：esp32、esp32s3、esp32c3，一般仅需要使用 命令1 即可。&lt;strong>需要注意的是：如果你使用的设备为ESP32H2，而ESP32H2 仅在 lighting-app 中支持，执行 命令2 将其设置为目标&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 命令1，通用命令，ESP32H2请执行命令2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idf.py set-target (target chip)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 命令2，ESP32H2专用命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idf.py --preview set-target esp32h2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里我使用的是 ESP32C3，所以执行以下命令即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">target&lt;/span> &lt;span class="n">esp32c3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>配置选项（可遵循默认配置即可，非特定配置可跳过这一步）&lt;/li>
&lt;/ul>
&lt;p>要&lt;strong>构建特定配置&lt;/strong>（示例&lt;code>m5stack&lt;/code>）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">rm sdkconfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idf.py -D &amp;#39;SDKCONFIG_DEFAULTS=sdkconfig_m5stack.defaults&amp;#39; build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：如果使用特定的设备配置，强烈建议从默认设置之一开始并在此基础上进行自定义。某些配置具有在设备特定配置中自定义的不同约束（例如：主应用程序堆栈大小）。&lt;/p>
&lt;p>要自定义配置，请运行 menuconfig，在菜单中可完成自定义配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">idf.py menuconfig
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>构建应用程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">build&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>擦除Flash&lt;/li>
&lt;/ul>
&lt;p>构建应用程序后，要通过 USB 连接您的设备来闪擦除它。然后运行以下命令擦除整个闪存，将演示应用程序闪存到设备上，然后监控其输出。&lt;/p>
&lt;p>请注意，有时您可能必须在设备尝试连接时按住设备上的启动按钮，然后才能刷机。对于 ESP32-DevKitC 设备，这在&lt;a class="link" href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/hw-reference/esp32/get-started-devkitc.html#functional-description" target="_blank" rel="noopener"
>functional description diagram&lt;/a>中有所提及。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">idf.py -p (PORT) erase_flash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idf.py -p (PORT) flash monitor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请替换&lt;code>(PORT)&lt;/code>为您系统的正确 USB 设备名称（如&lt;code>/dev/ttyUSB0&lt;/code>在 Linux 或&lt;code>/dev/tty.usbserial-101&lt;/code>Mac 上）。&lt;/p>
&lt;p>查看USB设备，esp32c3设备名为 &lt;code>ttyUSB0&lt;/code>，因此执行以下命令 ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ttyUSB0&lt;/span> &lt;span class="n">erase_flash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ttyUSB0&lt;/span> &lt;span class="n">flash&lt;/span> &lt;span class="n">monitor&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>注意此时的设备串口&lt;strong>终端1&lt;/strong>暂时先不关闭，后面可使用&lt;code>CTRL+]&lt;/code>关闭设备串口调试&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301730041.png"
loading="lazy"
alt="image-20230530173001926"
>&lt;/p>
&lt;p>注意：某些用户可能必须在设备出现在 /dev/tty 之前安装&lt;a class="link" href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="noopener"
>VCP 驱动程序。&lt;/a>&lt;/p>
&lt;p>提示：在监视器运行时，您可以通过按 Ctrl+t Ctrl+h 来查看各种监视器命令的菜单。&lt;/p>
&lt;h3 id="3项目调试">3.项目调试
&lt;/h3>&lt;p>以下四种方式可以用于调试在ESP32上运行应用程序：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/controller/python" target="_blank" rel="noopener"
>Python Based Device Controller&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/examples/chip-tool" target="_blank" rel="noopener"
>Standalone chip-tool&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/darwin/CHIPTool" target="_blank" rel="noopener"
>iOS chip-tool App&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/examples/android/CHIPTool" target="_blank" rel="noopener"
>Android chip-tool App&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注：这里使用 &lt;code>Standalone chip-tool&lt;/code>进行项目调试&lt;/strong>&lt;/p>
&lt;p>打开一个新的&lt;strong>终端2&lt;/strong>，我们需要运行构建的可执行文件并将远程设备的鉴别器和配对代码以及要使用的网络凭据传递给它，执行命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> esp-matter/connectedhomeip/connectedhomeip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 激活matter环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> scripts/activate.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301723608.png"
loading="lazy"
alt="image-20230530172301207"
>&lt;/p>
&lt;ul>
&lt;li>调试WIFI设备（ESP32、ESP32C3、ESP32S3）&lt;/li>
&lt;/ul>
&lt;p>如果你使用的是Thread设备(ESPH2)或以太网设备(ESP32-Ethernet-Kit)，设备调试具体可以查看&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/esp32/build_app_and_commission.md" target="_blank" rel="noopener"
>此链接&lt;/a>&lt;/p>
&lt;p>执行下面命令将 matter 设备接入现有现有IP网络，这里我们&lt;strong>基于BLE调试&lt;/strong>&lt;/p>
&lt;p>&lt;strong>需要注意的是，你需要确保你的 Linux 蓝牙可用，如果是使用虚拟机的话需要考虑购买一个蓝牙适配器，可参考这个&lt;a class="link" href="https://m.tb.cn/h.UvoJzj4?tk=KpYpdNFRueB" target="_blank" rel="noopener"
>购买链接&lt;/a>&lt;/strong>&lt;/p>
&lt;p>接下来请按照我的步骤一步步执行：&lt;/p>
&lt;ul>
&lt;li>step1：安装 blueman 软件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install blueman &lt;span class="c1">#安装blueman软件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo /etc/init.d/bluetooth restart &lt;span class="c1"># 重启blueman服务&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step2：确保你的蓝牙状态处于激活状态&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看蓝牙状态&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl status bluetooth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://user-images.githubusercontent.com/98592772/236623922-496f12f1-837d-44eb-8cca-a76b5f132e2c.png"
loading="lazy"
alt="7e8b531f8b4be994ed272cf2e69703c"
>&lt;/p>
&lt;p>如果未运行，请执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo systemctl &lt;span class="nb">enable&lt;/span> bluetooth
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start bluetooth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step3：确认蓝牙适配器已经被识别并启用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hciconfig -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://user-images.githubusercontent.com/98592772/236629771-b49be4da-0979-45b7-9484-f9bb2f895f29.png"
loading="lazy"
alt="LRHC%H77T8AU FZ_V$F@(Q6"
>&lt;/p>
&lt;p>根据提示信息我们可以得知我的蓝牙适配器名为&amp;quot;hci0&amp;quot;，并且状态为 &amp;ldquo;DOWN&amp;rdquo;，因此我们需要启用该蓝牙适配器。&lt;/p>
&lt;ul>
&lt;li>step4：启用蓝牙适配器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo hciconfig hci0 up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step5：为了让 matter 设备连接蓝牙网络，我们需要让蓝牙适配器在任何时候可见，点击右上角的蓝牙图标，点击&lt;code>Adapters...---&amp;gt;Visibility Setting---&amp;gt;Always visible&lt;/code>，这一步很关键，&lt;strong>每次基于 BLE 调试都需要检查这一步！！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301744038.png"
loading="lazy"
alt="image-20230530174457873"
>&lt;/p>
&lt;ul>
&lt;li>step6：BLE调试，回到&lt;strong>终端2&lt;/strong>，执行如下命令&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> esp-matter/connectedhomeip/connectedhomeip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">out/debug/chip-tool pairing ble-wifi 0x7283 jetbot jetbotwyq &lt;span class="m">20202021&lt;/span> &lt;span class="m">3840&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：本机ip和matter设备ip必须在同一局域网下&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>0x7283&lt;/code>（必须是十进制数或&lt;code>0x&lt;/code>- 前缀的十六进制数）是要分配给正在调试的节点的节点 ID，随意填写即可。&lt;/li>
&lt;li>&lt;code>jetbot 是 Wi-Fi SSID&lt;/code> 可以是字符串，也可以是&lt;code>hex:XXXXXXXX&lt;/code> SSID 的字节被编码为两位十六进制数字的形式。&lt;/li>
&lt;li>&lt;code>jetbotwyq&lt;/code> 是 Wi-Fi 密码，同样是字符串或十六进制数据&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301754997.png"
loading="lazy"
alt="image-20230530175437844"
>&lt;/p>
&lt;p>在&lt;strong>终端1&lt;/strong>我们可以看到相关的ip信息：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301756204.png"
loading="lazy"
alt="image-20230530175633102"
>&lt;/p>
&lt;ul>
&lt;li>step7：利用 chip tool 控制LED开关&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># open led&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">out/debug/chip-tool onoff on 0x7896 0x1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># close led&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">out/debug/chip-tool onoff off 0x7896 0x1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>这里的节点ID：0x7896需要和前面保持一致&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301802687.jpg"
loading="lazy"
alt="cd20c5fede056bf65b089da69ab9f3a"
>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301802294.jpg"
loading="lazy"
alt="f40b925710de89f66bf9ecf7ef27d7e"
>&lt;/p>
&lt;h2 id="chip-tool基于ble调试完整过程">CHIP TOOL基于BLE调试完整过程
&lt;/h2>&lt;div class="video-wrapper">
&lt;video
controls
src="./video.mp4"
autoplay
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="./video.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;hr>
&lt;h2 id="参考">参考
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/chip_tool_guide.md" target="_blank" rel="noopener"
>CHIP Reference&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/esp32/setup_idf_chip.md" target="_blank" rel="noopener"
>Setup ESP-IDF and CHIP Environment&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/esp32/build_app_and_commission.md" target="_blank" rel="noopener"
>building and commissioning&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>【Matter】Matter环境构建参考文档</title><link>https://kurisaw.github.io/p/mattermatter%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/mattermatter%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</guid><description>&lt;img src="https://kurisaw.github.io/p/mattermatter%E7%8E%AF%E5%A2%83%E6%9E%84%E5%BB%BA%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/cover.jpg" alt="Featured image of post 【Matter】Matter环境构建参考文档" />&lt;h1 id="matter-环境构建参考文档">Matter 环境构建参考文档
&lt;/h1>&lt;hr>
&lt;p>Matter支持用&lt;a class="link" href="https://gn.googlesource.com/gn/" target="_blank" rel="noopener"
>GN&lt;/a>配置构建，一个快速且可扩展的元构建系统，生成输入到&lt;a class="link" href="https://ninja-build.org/" target="_blank" rel="noopener"
>ninja&lt;/a>。&lt;/p>
&lt;h2 id="经过测试的操作系统">经过测试的操作系统
&lt;/h2>&lt;p>该构建系统已经在以下操作系统上进行了测试：&lt;/p>
&lt;ul>
&lt;li>macOS 10.15&lt;/li>
&lt;li>Debian 11 (64 bit required)&lt;/li>
&lt;li>Ubuntu 22.04 LTS&lt;/li>
&lt;/ul>
&lt;h2 id="构建系统的特点">构建系统的特点
&lt;/h2>&lt;p>Matter构建系统有以下特点：&lt;/p>
&lt;ul>
&lt;li>速度非常快，占用空间小&lt;/li>
&lt;li>跨平台处理： Linux, Darwin, Embedded Arm, 等等&lt;/li>
&lt;li>多种工具链和跨工具链的依赖性&lt;/li>
&lt;li>集成了自动测试框架： ninja check&lt;/li>
&lt;li>自省：&amp;ldquo;gn desc&amp;rdquo;。&lt;/li>
&lt;li>自动格式化： &lt;code>gn格式&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="检查matter的代码">检查Matter的代码
&lt;/h2>&lt;p>要检查Matter资源库，请运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git clone --recurse-submodules git@github.com:project-chip/connectedhomeip.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="同步子模块">同步子模块
&lt;/h2>&lt;p>如果你已经签出了Matter的代码，运行下面的命令来同步子模块：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git submodule update --init
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="先决条件">先决条件
&lt;/h2>&lt;p>在构建之前，你必须安装一些操作系统的特定依赖。&lt;/p>
&lt;h3 id="1在linux上安装先决条件">1.在Linux上安装先决条件
&lt;/h3>&lt;p>在基于Debian的Linux发行版上，如Ubuntu，这些依赖项可以通过以下命令来满足：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get install git gcc g++ pkg-config libssl-dev libdbus-1-dev\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> libglib2.0-dev libavahi-client-dev ninja-build python3-venv python3-dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> python3-pip unzip libgirepository1.0-dev libcairo2-dev libreadline-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="用户界面的构建">用户界面的构建
&lt;/h4>&lt;p>如果通过&lt;code>build_examples.py&lt;/code>和&lt;code>with-ui&lt;/code>变体构建，也要安装SDL2：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get install libsdl2-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2在macos上安装先决条件">2.在macOS上安装先决条件
&lt;/h3>&lt;p>在macOS上，从 Mac App Store上安装 Xcode 。&lt;/p>
&lt;h4 id="用户界面的构建-1">用户界面的构建
&lt;/h4>&lt;p>如果构建&lt;code>-with-ui&lt;/code>变体，也要安装 SDL2 ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">brew install sdl2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3在raspberry-pi-4上安装先决条件">3.在Raspberry Pi 4上安装先决条件
&lt;/h3>&lt;p>完成以下步骤：&lt;/p>
&lt;ol>
&lt;li>使用：在 micro SD 卡上&lt;code>rpi-imager&lt;/code>安装适用于 arm64 架构的 Ubuntu &lt;em>22.04&lt;/em> 64 位&lt;em>服务器操作系统。&lt;/em>&lt;/li>
&lt;li>启动SD卡。&lt;/li>
&lt;li>用默认的用户账户 &amp;ldquo;ubuntu &amp;ldquo;和密码 &amp;ldquo;ubuntu &amp;ldquo;登录。&lt;/li>
&lt;li>继续执行 &lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/BUILDING.md#installing-prerequisites-on-linux" target="_blank" rel="noopener"
>在 Linux 上安装先决条件&lt;/a>。&lt;/li>
&lt;li>安装一些Raspberry Pi的特定依赖项：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get install pi-Bluetooth avahi-utils
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="6">
&lt;li>安装完 &amp;ldquo;pi-bluetooth &amp;ldquo;后，重新启动你的Raspberry Pi。&lt;/li>
&lt;/ol>
&lt;h4 id="配置wpa_supplicant以存储永久变化">配置wpa_supplicant以存储永久变化
&lt;/h4>&lt;p>默认情况下，wpa_supplicant是不允许更新（覆盖）配置的。如果你想让Matter应用程序能够存储配置的变化，您需要进行以下更改：&lt;/p>
&lt;ol>
&lt;li>编辑 &lt;code>dbus-fi.w1.wpa_supplicant1.service&lt;/code> 文件以使用配置文件来代替，运行以下命令：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo nano /etc/systemd/system/bus-fi.w1.wpa_supplicant1.service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>运行以下命令，将wpa_supplicant的启动参数改为提供的值：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ExecStart=/sbin/wpa_supplicant -u -s -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>通过运行以下命令添加&lt;code>wpa-supplicant&lt;/code>配置文件：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo nano /etc/wpa_supplicant/wpa_supplicant.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>在&lt;code>wpa-supplicant&lt;/code>文件中添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ctrl_interface=DIR=/run/wpa_supplicant
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">update_config=1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>重新启动你的Raspberry Pi。&lt;/li>
&lt;/ol>
&lt;h2 id="安装zap工具">安装ZAP工具
&lt;/h2>&lt;p>&lt;code>bootstrap.sh&lt;/code>将下载一个兼容的ZAP工具版本并将其设置在&lt;code>$PATH&lt;/code>。如果你想安装或使用一个不同版本的工具，你可以从ZAP项目的&lt;a class="link" href="https://github.com/project-chip/zap/releases" target="_blank" rel="noopener"
>Release&lt;/a> 页面下载。&lt;/p>
&lt;h3 id="1linux-arm">1.Linux ARM
&lt;/h3>&lt;p>Zap不提供ARM的二进制版本。Rosetta为Darwin解决了这个问题、然而，对于linux arm，你必须使用本地的ZAP，一般通过设置&lt;code>$ZAP_DEVELOPMENT_PATH&lt;/code>（见下面 &lt;code>使用哪种ZAP&lt;/code>一节）。&lt;/p>
&lt;p>文件&lt;code>scripts/setup/zap.json&lt;/code>包含CIPD会下载的版本、所以你可以从zap项目中下载一个兼容的版本&lt;a class="link" href="https://github.com/project-chip/zap/releases" target="_blank" rel="noopener"
>Release&lt;/a>。要作为源代码签出代码，相应的标签应该存在于zap中&lt;a class="link" href="https://github.com/project-chip/zap/tags" target="_blank" rel="noopener"
>repository tags&lt;/a> 列表中。&lt;/p>
&lt;p>命令示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">RUN &lt;span class="nb">set&lt;/span> -x &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> mkdir -p /opt/zap-&lt;span class="si">${&lt;/span>&lt;span class="nv">ZAP_VERSION&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git clone https://github.com/project-chip/zap.git /opt/zap-&lt;span class="si">${&lt;/span>&lt;span class="nv">ZAP_VERSION&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> /opt/zap-&lt;span class="si">${&lt;/span>&lt;span class="nv">ZAP_VERSION&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git checkout &lt;span class="si">${&lt;/span>&lt;span class="nv">ZAP_VERSION&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> npm config &lt;span class="nb">set&lt;/span> user &lt;span class="m">0&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> npm ci
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENV &lt;span class="nv">ZAP_DEVELOPMENT_PATH&lt;/span>&lt;span class="o">=&lt;/span>/opt/zap-&lt;span class="si">${&lt;/span>&lt;span class="nv">ZAP_VERSION&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2使用哪种zap">2.使用哪种ZAP
&lt;/h3>&lt;p>ZAP工具脚本使用以下检测，按重要性排序：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>$ZAP_DEVELOPMENT_PATH&lt;/code>指向一个ZAP检出。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你在本地开发ZAP，并希望用你的改动来运行ZAP和你的改动。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>$ZAP_INSTALL_PATH&lt;/code>指向&lt;code>zap-linux.zip&lt;/code>或`zap-m&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="为构建做准备">为构建做准备
&lt;/h2>&lt;p>在运行任何其他构建命令之前，&lt;code>scripts/activate.sh&lt;/code>的环境设置脚本应该在最高层。这个脚本负责下载GN、ninja，并在Python环境中设置用于构建和测试的库来构建和测试。&lt;/p>
&lt;p>运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">source scripts/activate.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="1更新环境">1.更新环境
&lt;/h3>&lt;p>如果脚本说环境已经过期，你可以通过运行下面的命令来更新它：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">source scripts/bootstrap.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>脚本 &lt;code>scripts/bootstrap.sh&lt;/code>从头开始重新创建环境，这是很昂贵的，所以避免运行它，除非环境已经过期。&lt;/p>
&lt;h2 id="为主机操作系统linux或macos进行构建">为主机操作系统（Linux或macOS）进行构建
&lt;/h2>&lt;p>运行以下命令，为主机平台构建所有的源代码、库和测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">source scripts/activate.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn gen out/host
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ninja -C out/host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这些命令生成了一个适合调试的配置。要配置一个构建，请指定&lt;code>is_debug=false&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn gen out/host --args=&amp;#39;is_debug=false&amp;#39; 。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ninja -C out/host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>**注意：**目录名称 &amp;ldquo;out/host &amp;ldquo;可以是任何目录，通常是在&lt;code>out&lt;/code>目录下构建。这个例子使用 &lt;code>host&lt;/code> 来强调为主机系统构建。不同的构建目录可以用于不同的配置，或者使用一个目录，并在必要时可以根据需要通过&lt;code>gn args&lt;/code>重新配置。&lt;/p>
&lt;/blockquote>
&lt;p>要运行所有测试，请运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ninja -C out/host check
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>要想只运行&lt;code>src/inet/tests&lt;/code>中的测试，可以运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ninja -C out/host src/inet/tests:test_run
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>**注意：**构建系统会缓存通过的测试，所以你可能会看到以下消息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ninja: no work to do
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这意味着测试在之前的构建中通过了。&lt;/p>
&lt;/blockquote>
&lt;h2 id="使用build_examplespy">使用&lt;code>build_examples.py&lt;/code>
&lt;/h2>&lt;p>该脚本&lt;code>./scripts/build/build_examples.py&lt;/code>提供了一个统一的编译构建接口，可以使用&lt;code>gn&lt;/code>、&lt;code>cmake&lt;/code>、&lt;code>ninja&lt;/code>和其他必要的工具来编译各种平台。&lt;/p>
&lt;p>使用 &lt;code>./scripts/build/build_examples.py targets&lt;/code> 来查看支持的目标。&lt;/p>
&lt;p>构建命令的例子：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 编译并在主机上运行所有测试：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./scripts/build/build_examples.py --target linux-x64-test build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 使用 libfuzzer 编译模糊测试标签(模糊测试需要 clang)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./scripts/build/build_examples.py --target linux-x64-test-clang-asan-libfuzzer build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 编译一个esp32的例子
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./scripts/build/build_examples.py --target esp32-m5stack-all-clusters build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 编译一个 nrf 示例
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./scripts/build/build_examples.py --target nrf-nrf5340dk-pump build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="1libfuzzer单元测试">1.&lt;code>libfuzzer&lt;/code>单元测试
&lt;/h3>&lt;p>&lt;code>libfuzzer&lt;/code>单元测试测试只被编译而不被执行（你必须手动执行它们）。为了获得最佳的错误检测，应该使用某种形式的净化器，如&lt;code>asan&lt;/code>应该被使用。&lt;/p>
&lt;p>可执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">./scripts/build/build_examples.py --target linux-x64-test-lang-asan-libfuzzer build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>之后，测试应该被定位在&lt;code>out/linux-x64-tests-lang-asan-libfuzzer/tests/&lt;/code>。&lt;/p>
&lt;h4 id="ossfuzz的配置">&lt;code>ossfuzz&lt;/code>的配置
&lt;/h4>&lt;p>&lt;code>ossfuzz&lt;/code>配置不是独立的模糊测试，而是作为一个与外部模糊测试自动构建的集成点。它们会获取环境变量，如&lt;code>$CFLAGS&lt;/code>、&lt;code>$CXXFLAGS&lt;/code>和&lt;code>$lib_fuzzing_engine&lt;/code>。&lt;/p>
&lt;p>你可能需要&lt;code>libfuzzer&lt;/code>+&lt;code>asan&lt;/code>的构建来代替本地测试。&lt;/p>
&lt;h2 id="构建自定义配置">构建自定义配置
&lt;/h2>&lt;p>构建是通过设置构建参数来配置的。你可以通过以下方式设置这些参数：&lt;/p>
&lt;ul>
&lt;li>将&lt;code>--args&lt;/code>选项传递给&lt;code>gn gen&lt;/code>。&lt;/li>
&lt;li>在输出目录上运行&lt;code>gn args&lt;/code>。&lt;/li>
&lt;li>编辑输出目录下的&lt;code>args.gn&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>要配置一个新的构建或编辑现有构建的参数，请运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">source scripts/activate.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn args out/custom
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ninja -C out/custom
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>两个关键的内置构建参数是 &lt;code>target_os&lt;/code> 和 &lt;code>target_cpu&lt;/code>，它们分别控制构建的操作系统和CPU。&lt;/p>
&lt;p>要查看所有可用的构建参数的帮助，请运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn gen out/custom
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn args --list out/custom
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="构建实例">构建实例
&lt;/h2>&lt;p>你可以通过两种方式构建例子。&lt;/p>
&lt;h3 id="1将例子作为独立的项目来构建">1.将例子作为独立的项目来构建
&lt;/h3>&lt;p>要把例子作为单独的项目来构建，在Matter的&lt;code>third_party directory&lt;/code>，运行下面的命令，输入正确的路径到例子的正确路径（这里是 &amp;ldquo;chip-shell&amp;rdquo;）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd examples/shell
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn gen out/debug
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ninja -C out/debug
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2在顶层建立实例">2.在顶层建立实例
&lt;/h3>&lt;p>你可以在Matter项目的顶层构建例子。请看下面的&lt;code>统一构建&lt;/code>一节了解详情。&lt;/p>
&lt;h2 id="统一构建">统一构建
&lt;/h2>&lt;p>要构建一个近似于连续构建集的统一配置，请运行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">source scripts/activate.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn gen out/unified --args=&amp;#39;is_debug=true target_os=&amp;#34;all&amp;#34;&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ninja -C out/unified all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>你可以在改变提交配置之前使用这组命令构建，并测试GCC、Clang、MbedTLS和例子的配置。在一个并行的构建中。每个配置都有一个单独的子目录在输出目录中。&lt;/p>
&lt;p>这种统一的构建可以用于日常的开发，尽管为每一次编辑而构建所有的东西会更昂贵。构建每一个编辑项目的成本。为了节省时间，你可以将配置来构建：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ninja -C out/unified host_gcc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ninja -C out/unified check_host_gcc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>用配置的名称替换&lt;code>host_gcc&lt;/code>，它可以在根目录下的 &amp;ldquo;BUILD.gn &amp;ldquo;中找到。&lt;/p>
&lt;p>你也可以用参数对生成的配置进行微调。比如说&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn gen out/unified --args=&amp;#39;is_debug=true target_os=&amp;#34;all&amp;#34; enable_host_clang_build=false&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>完整的列表请参见根目录&lt;code>BUILD.gn&lt;/code>。&lt;/p>
&lt;p>在统一的构建中，目标有多个实例，需要通过添加通过添加&lt;code>(toolchain)&lt;/code>后缀来区分。使用&lt;code>gn ls out/debug&lt;/code>来列出所有的目标实例。例如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">gn&lt;/span> &lt;span class="n">desc&lt;/span> &lt;span class="n">out&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">unified&lt;/span> &lt;span class="s1">&amp;#39;//src/controller(//build/toolchain/host:linux_x64_clang)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>**注意：**有些平台可以作为统一构建的一部分来构建需要下载额外的工具。要将这些工具添加到构建中，必须将其位置
必须作为构建参数提供。例如，要添加 &lt;code>Simplelink cc13x2_26x2&lt;/code> 例子到统一构建中，安装&lt;a class="link" href="https://www.ti.com/tool/SYSCONFIG" target="_blank" rel="noopener"
>SysConfig&lt;/a> 并添加以下构建：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn gen out/unified --args=&amp;#34;target_os=\&amp;#34;all\&amp;#34; enable_ti_simplelink_builds=true &amp;gt; ti_sysconfig_root=\&amp;#34;/path/to/sysconfig\&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;h2 id="获得帮助">获得帮助
&lt;/h2>&lt;p>GN集成了帮助，你可以通过&lt;code>gn help&lt;/code>命令访问。&lt;/p>
&lt;p>请确保查看以下推荐的主题：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">gn帮助执行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gn&lt;/span> &lt;span class="n">help&lt;/span> &lt;span class="err">语法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gn&lt;/span> &lt;span class="n">help&lt;/span> &lt;span class="n">toolchain&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>也可参见 &lt;a class="link" href="https://gn.googlesource.com/gn/&amp;#43;/master/docs/quick_start.md" target="_blank" rel="noopener"
>快速入门指南&lt;/a>。&lt;/p>
&lt;h2 id="自省">自省
&lt;/h2>&lt;p>GN有各种自省工具来帮助你检查构建配置。下面的例子以&lt;code>out/host&lt;/code>输出目录为例：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>显示一个输出目录中的所有目标：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn ls out/host
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>显示所有将被构建的文件：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn output out/host &amp;#39;*&amp;#39;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>显示配置的目标的GN表示：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn desc out/host //src/inet --all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>将整个构建的GN表示转为JSON格式：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn desc out/host/ &amp;#39;*&amp;#39; --all --format=json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>显示依赖关系树：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn desc out/host //:all deps --tree --all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>查找依赖性路径：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn path out/host //src/transport/tests:test //src/system
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>列出与`libCHIP&amp;rsquo;连接的有用信息：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gn desc out/host //src/lib include_dirs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn desc out/host //src/lib defines
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn desc out/host //src/lib outputs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 一切都是JSON格式
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn desc out/host //src/lib --format=json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="覆盖范围">覆盖范围
&lt;/h2>&lt;p>代码覆盖率脚本会生成一份报告，其中详细说明了 Matter SDK 源代码的执行量。它还提供了有关 Matter SDK 执行代码段的频率并生成源文件副本的信息，并用执行频率进行了注释。&lt;/p>
&lt;p>运行以下命令来启动该脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">./scripts/build_coverage.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>默认情况下，代码覆盖脚本在单元测试级别执行。单元测试由开发人员创建，因此可以让他们最好地了解单元测试中要包含哪些测试。您可以使用以下参数按范围和执行方式扩展覆盖率测试：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> -c, --code 指定收集覆盖数据的范围。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> core&amp;#34;：从Matter SDK的核心堆栈中收集覆盖数据。--default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> clusters&amp;#34;：从Matter SDK中的cluster实现中收集覆盖数据。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;all&amp;#39;：收集Matter SDK的覆盖数据。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -t, --tests 指定哪些工具来运行覆盖率检查。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;unit&amp;#39;： 运行单元测试来驱动覆盖率检查。--default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;yaml&amp;#39;： 运行yaml测试来驱动覆盖率检查。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#39;all&amp;#39;： 运行单元和yaml测试来驱动覆盖率检查。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此外，请参阅 Matter SDK 的最新单元测试覆盖率报告（每天收集）： &lt;a class="link" href="https://matter-build-automation.ue.r.appspot.com/" target="_blank" rel="noopener"
>matter coverage&lt;/a>。&lt;/p>
&lt;h2 id="维护事项">维护事项
&lt;/h2>&lt;p>如果你对GN构建系统做了任何改变，下一次构建会自动重新生成&lt;code>ninja&lt;/code>文件。不需要做任何事情。&lt;/p></description></item><item><title>【Matter】esp-matter环境下的应用实践（程序烧录及串口监视）</title><link>https://kurisaw.github.io/p/matteresp-matter%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%E7%A8%8B%E5%BA%8F%E7%83%A7%E5%BD%95%E5%8F%8A%E4%B8%B2%E5%8F%A3%E7%9B%91%E8%A7%86/</link><pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/matteresp-matter%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%E7%A8%8B%E5%BA%8F%E7%83%A7%E5%BD%95%E5%8F%8A%E4%B8%B2%E5%8F%A3%E7%9B%91%E8%A7%86/</guid><description>&lt;img src="https://kurisaw.github.io/p/matteresp-matter%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5%E7%A8%8B%E5%BA%8F%E7%83%A7%E5%BD%95%E5%8F%8A%E4%B8%B2%E5%8F%A3%E7%9B%91%E8%A7%86/cover.jpg" alt="Featured image of post 【Matter】esp-matter环境下的应用实践（程序烧录及串口监视）" />&lt;h1 id="esp-matter环境下的应用实践">esp-matter环境下的应用实践
&lt;/h1>&lt;hr>
&lt;h2 id="前提准备">前提准备
&lt;/h2>&lt;p>请确保你本地已经配置好 &lt;code>esp-idf&lt;/code> 及&lt;code>esp-matter&lt;/code>环境，可参考此博客&lt;a class="link" href="https://blog.csdn.net/qq_56914146/article/details/130484975?spm=1001.2014.3001.5501" target="_blank" rel="noopener"
>【Matter】esp-matter开发环境搭建&lt;/a>&lt;/p>
&lt;h2 id="设置环境变量">设置环境变量
&lt;/h2>&lt;h3 id="1esp-idf">1.ESP-IDF
&lt;/h3>&lt;p>根据官网提示，我们需要设置linux平台下的标准工具链，安装以下软件包：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sudo&lt;/span> &lt;span class="n">apt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">get&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">git&lt;/span> &lt;span class="n">wget&lt;/span> &lt;span class="n">flex&lt;/span> &lt;span class="n">bison&lt;/span> &lt;span class="n">gperf&lt;/span> &lt;span class="n">python3&lt;/span> &lt;span class="n">python3&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pip&lt;/span> &lt;span class="n">python3&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">setuptools&lt;/span> &lt;span class="n">cmake&lt;/span> &lt;span class="n">ninja&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">build&lt;/span> &lt;span class="n">ccache&lt;/span> &lt;span class="n">libffi&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dev&lt;/span> &lt;span class="n">libssl&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dev&lt;/span> &lt;span class="n">dfu&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">util&lt;/span> &lt;span class="n">libusb&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用 ESP-IDF 需要 CMake 3.5 或以上版本。较早的 Linux 发行版可能需要升级自身的软件源仓库，或开启 backports 套件库，或安装 “cmake3” 软件包（不是安装 “cmake”）。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">idf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">source&lt;/span> &lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041609281.png"
loading="lazy"
alt="image-20230504160909004"
>&lt;/p>
&lt;h3 id="2esp-matter">2.ESP-Matter
&lt;/h3>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/BUILDING.md#installing-prerequisites-on-linux" target="_blank" rel="noopener"
>Linux&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/BUILDING.md#installing-prerequisites-on-macos" target="_blank" rel="noopener"
>macOS&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>由于我们使用的是Linux环境，所以此处仅作Linux下的说明，macOS可详见&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/BUILDING.md#installing-prerequisites-on-macos" target="_blank" rel="noopener"
>此处&lt;/a>&lt;/p>
&lt;p>在基于 Debian 的 Linux 发行版（例如 Ubuntu）上，可以使用以下命令满足这些依赖项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt-get install git gcc g++ pkg-config libssl-dev libdbus-1-dev &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> libglib2.0-dev libavahi-client-dev ninja-build python3-venv python3-dev &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> python3-pip unzip libgirepository1.0-dev libcairo2-dev libreadline-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>准备编译matter所需环境。注：如切换了其他分支需要重新运行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ./esp/esp-matter/connectedhomeip/connectedhomeip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> scripts/bootstrap.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305060133538.png"
loading="lazy"
alt="image-20230506013329415"
>&lt;/p>
&lt;p>激活编译matter环境&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> ./esp/esp-matter/connectedhomeip/connectedhomeip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> scripts/activate.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041611578.png"
loading="lazy"
alt="image-20230504161123505"
>&lt;/p>
&lt;h2 id="matter-example编译下载">Matter Example编译下载
&lt;/h2>&lt;h3 id="1激活esp-matter环境">1.激活esp-matter环境
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">idf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2选择esp设备">2.选择esp设备
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">examples&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">light&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">target&lt;/span> &lt;span class="n">esp32c3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>初次执行这个命令发生了如下报错：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">AttributeError&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">HTTPResponse&lt;/span>&lt;span class="err">&amp;#39;&lt;/span> &lt;span class="n">object&lt;/span> &lt;span class="n">has&lt;/span> &lt;span class="n">no&lt;/span> &lt;span class="n">attribute&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">strict&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在GitHub上参考此&lt;a class="link" href="https://github.com/espressif/esp-idf/issues/11340" target="_blank" rel="noopener"
>issue&lt;/a>，并执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">U&lt;/span> &lt;span class="s">&amp;#34;urllib3&amp;lt;2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>同时重新执行esp-matter安装脚本：&lt;/p>
&lt;p>由于需要重新运行安装脚本命令，此处直接执行的话会报错，参考此&lt;a class="link" href="https://github.com/kurisaW/Summer-of-Open-Source/issues/7" target="_blank" rel="noopener"
>issue&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">rm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">rf&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">connectedhomeip&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">connectedhomeip&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">environment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">install&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">U&lt;/span> &lt;span class="s">&amp;#34;urllib3&amp;lt;2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后回到示例工程下继续执行esp设备选择&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">examples&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">light&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">target&lt;/span> &lt;span class="n">esp32c3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>此时发生了新的错误：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305060221146.png"
loading="lazy"
alt="image-20230506022134054"
>&lt;/p>
&lt;p>由于示例工程下的build以前遗留的构建文件，而系统在执行程序时并不会覆盖或主动删除旧的构建文件，因此需要用户手动删除，因此正确的操作就是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sudo&lt;/span> &lt;span class="n">rm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">examples&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">light&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">build&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">target&lt;/span> &lt;span class="n">esp32c3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>最后成功解决问题：&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/98592772/236539480-35af78e1-382f-4092-a25b-fb2a09004d0a.png"
loading="lazy"
alt="b372338ad9384db034000d7839549b5"
>&lt;/p>
&lt;h3 id="3编译工程">3.编译工程
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">build&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305060250998.png"
loading="lazy"
alt="image-20230506025001282"
>&lt;/p>
&lt;h3 id="4sdk烧写">4.SDK烧写
&lt;/h3>&lt;p>第一次烧写 SDK 时，需要擦除整个 flash 再执行烧录命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">erase_flash&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305060252819.png"
loading="lazy"
alt="image-20230506025047817"
>&lt;/p>
&lt;p>烧录程序并打开串口监视&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">flash&lt;/span> &lt;span class="n">monitor&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>可以看到烧录进度：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305060251334.png"
loading="lazy"
alt="image-20230506025133178"
>&lt;/p>
&lt;p>包括串口监视器的提示信息，同时执行以下命令可退出串口监视：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">CTRL&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305060254172.png"
loading="lazy"
alt="image-20230506025401001"
>&lt;/p>
&lt;p>那么esp-matter项目环境的编译下载就先讲到这里，后面再进行详细的使用教程的讲解。&lt;/p>
&lt;hr>
&lt;p>参考链接：&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/hydfxy2018/article/details/122041168?spm=1001.2101.3001.6650.11&amp;amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-11-122041168-blog-127516686.pc_relevant_default&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-11-122041168-blog-127516686.pc_relevant_default&amp;amp;utm_relevant_index=12" target="_blank" rel="noopener"
>Matter Over Wifi 例程体验（CHIP Over Wifi）&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/weixin_40209493/article/details/125814311?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168324979316800211536064%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;amp;request_id=168324979316800211536064&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-4-125814311-null-null.142%5ev86%5econtrol_2,239%5ev2%5einsert_chatgpt&amp;amp;utm_term=matter%E6%8A%A5%E9%94%99&amp;amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener"
>ESP-Matter 环境测试&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.csdn.net/puweiqi/article/details/129474079?spm=1001.2101.3001.6650.2&amp;amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-129474079-blog-125973073.235%5Ev32%5Epc_relevant_default_base3&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EYuanLiJiHua%7EPosition-2-129474079-blog-125973073.235%5Ev32%5Epc_relevant_default_base3&amp;amp;utm_relevant_index=3" target="_blank" rel="noopener"
>matter搭建环境&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://docs.espressif.com/projects/esp-matter/en/main/esp32/developing.html" target="_blank" rel="noopener"
>https://docs.espressif.com/projects/esp-matter/en/main/esp32/developing.html&lt;/a>&lt;/p></description></item><item><title>【Matter】esp-matter开发环境搭建</title><link>https://kurisaw.github.io/p/matteresp-matter%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Thu, 04 May 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/matteresp-matter%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>&lt;img src="https://kurisaw.github.io/p/matteresp-matter%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/cover.jpg" alt="Featured image of post 【Matter】esp-matter开发环境搭建" />&lt;h1 id="esp-matter开发环境搭建">esp-matter开发环境搭建
&lt;/h1>&lt;hr>
&lt;h2 id="前提准备">前提准备
&lt;/h2>&lt;h3 id="1ubuntu2204磁盘容量不小于80g">1.Ubuntu22.04（磁盘容量不小于80G）
&lt;/h3>&lt;h3 id="2科学上网环境">2.科学上网环境
&lt;/h3>&lt;p>由于后面的 esp-matter 测试的时候需要使用到科学上网环境，所以我们需要提前确保 linux 环境能够使用科学上网。&lt;/p>
&lt;p>参考链接：&lt;a class="link" href="https://kurisaw.github.io/p/%e7%bb%8f%e9%aa%8c%e5%88%86%e4%ba%ablinux-%e7%8e%af%e5%a2%83%e4%b8%8bv2ray%e7%9a%84%e4%bd%bf%e7%94%a8/" target="_blank" rel="noopener"
>【经验分享】Linux 环境下v2ray的使用&lt;/a>&lt;/p>
&lt;h2 id="esp-idf-开发环境搭建">esp-idf 开发环境搭建
&lt;/h2>&lt;h3 id="1esp-idf-依赖环境安装">1.ESP-IDF 依赖环境安装
&lt;/h3>&lt;blockquote>
&lt;p>参考https://docs.espressif.com/projects/esp-idf/en/v4.4.3/esp32/get-started/linux-setup.html&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">sudo&lt;/span> &lt;span class="n">apt&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">get&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">git&lt;/span> &lt;span class="n">wget&lt;/span> &lt;span class="n">flex&lt;/span> &lt;span class="n">bison&lt;/span> &lt;span class="n">gperf&lt;/span> &lt;span class="n">python3&lt;/span> &lt;span class="n">python3&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pip&lt;/span> &lt;span class="n">python3&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">setuptools&lt;/span> &lt;span class="n">cmake&lt;/span> &lt;span class="n">ninja&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">build&lt;/span> &lt;span class="n">ccache&lt;/span> &lt;span class="n">libffi&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dev&lt;/span> &lt;span class="n">libssl&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">dev&lt;/span> &lt;span class="n">dfu&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">util&lt;/span> &lt;span class="n">libusb&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于在克隆官方esp-idf仓库的时候一般会发生如下两个错误：&lt;/p>
&lt;ul>
&lt;li>Problem1：执行 git submodule 速度慢&lt;/li>
&lt;li>Problem2：执行install.sh 速度慢&lt;/li>
&lt;/ul>
&lt;p>所以我们这里特别着重讲解，注意，这里解决问题的顺序与esp-idf环境搭建是一起进行的，读者可以顺着流程走。&lt;/p>
&lt;h3 id="2problem1-solution">2.Problem1 solution
&lt;/h3>&lt;p>首先使用递归克隆命令克隆整个仓库到文件夹下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mkdir&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">kurisaw&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Desktop&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">git&lt;/span> &lt;span class="n">clone&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">recursive&lt;/span> &lt;span class="nl">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//github.com/espressif/esp-idf.git
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">git&lt;/span> &lt;span class="n">submodule&lt;/span> &lt;span class="n">update&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">init&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">recursive&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>由于 esp-idf 仓库下有很多递归的下游仓库，一般使用 GitHub 下载的话也会导致递归下载失败，所以乐鑫官方提供了两种解决方案，包括镜像仓库使用、submodule 更新、开发工具安装等，可加速环境的搭建。解决方案如下：&lt;/p>
&lt;ul>
&lt;li>jihu-mirror 使用（推荐）&lt;/li>
&lt;li>submodule-update 使用（不推荐）&lt;/li>
&lt;/ul>
&lt;h4 id="21--jihu-mirror-使用推荐">2.1 jihu-mirror 使用（推荐）
&lt;/h4>&lt;ul>
&lt;li>Step 1：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">git&lt;/span> &lt;span class="n">clone&lt;/span> &lt;span class="nl">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//gitee.com/EspressifSystems/esp-gitee-tools.git
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">gitee&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tools&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Step 2：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用如下命令将仓库的 URL 进行替换：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">git&lt;/span> &lt;span class="n">config&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">global&lt;/span> &lt;span class="n">url&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nl">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//jihulab.com/esp-mirror/espressif/esp-idf.insteadOf https://github.com/espressif/esp-idf
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当我们使用命令 &lt;code>git clone https://github.com/espressif/esp-idf&lt;/code> 时，默认的 URL &lt;code>https://github.com/espressif/esp-idf&lt;/code> 将被自动替换成 &lt;code>https://jihulab.com/esp-mirror/espressif/esp-idf&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>Step 3：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 启用镜像URL
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">jihu&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mirror&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span> &lt;span class="n">set&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用命令 &lt;code>./jihu-mirror.sh unset&lt;/code> 恢复，不使用镜像的 URL。&lt;/p>
&lt;ul>
&lt;li>Step 4：当使用镜像 URL 之后，再递归克隆 esp-idf 仓库&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git clone --recursive https://github.com/espressif/esp-idf.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>当然如果不想使用镜像的URL可以使用如下命令进行恢复：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">jihu&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">mirror&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span> &lt;span class="n">unset&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="22--submodule-update-使用不推荐">2.2 submodule-update 使用（不推荐）
&lt;/h4>&lt;ul>
&lt;li>
&lt;p>Step 1：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">git&lt;/span> &lt;span class="n">clone&lt;/span> &lt;span class="n">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">//&lt;/span>&lt;span class="n">gitee&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">com&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">EspressifSystems&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">gitee&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tools&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">git&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>Step 2：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 仅克隆 esp-idf，不包含子模块
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">git&lt;/span> &lt;span class="n">clone&lt;/span> &lt;span class="nl">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//gitee.com/EspressifSystems/esp-idf.git
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>Step 3：&lt;/li>
&lt;/ul>
&lt;p>可以有两种方式来更新 submodules。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>方式一&lt;/p>
&lt;p>进入 esp-gitee-tools 目录，export submodule-update.sh 所在路径，方便后期使用，如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">gitee&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tools&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">export&lt;/span> &lt;span class="n">EGT_PATH&lt;/span>&lt;span class="o">=$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pwd&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>进入 esp-idf 目录执行 submodule-update.sh 脚本：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">cd esp-idf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$EGT_PATH/submodule-update.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>
&lt;p>方式二&lt;/p>
&lt;p>&lt;code>submodule-update.sh&lt;/code> 脚本支持将待更新 submodules 的工程路径作为参数传入，例如：&lt;code>submodule-update.sh PATH_OF_PROJ&lt;/code>。&lt;/p>
&lt;p>假如 Step 2 中 clone 的 esp-idf 位于 ~/git/esp32-sdk/esp-idf 目录，可使用以下方式来更新：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">gitee&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tools&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">./&lt;/span>&lt;span class="n">submodule&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">update&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">sh&lt;/span> &lt;span class="o">~/&lt;/span>&lt;span class="n">git&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp32&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sdk&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">idf&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果要更新其他工程，可以同样方式。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>值得吐槽的是， submodule-update 这种方法还需要保持上游代码分支的提交历史一致，如果官方未及时更新则会导致该脚本暂时失效，不推荐使用，避坑！！&lt;/p>
&lt;/blockquote>
&lt;h3 id="3problem2-solution">3.Problem2 solution
&lt;/h3>&lt;p>下面说第二个问题：执行./install.sh速度慢的问题&lt;/p>
&lt;p>在 Espressif Systems 的 esp-idf 开发框架中，某些组件的构建过程需要从 GitHub 的 release 页面下载预编译的二进制文件。然而，在中国大陆访问 GitHub 的速度往往较慢并且不稳定，为了改善这个问题，Espressif Systems 将这些预编译的二进制文件托管在国内的服务器上，并提供了一个名为 &lt;code>IDF_GITHUB_ASSETS&lt;/code> 的环境变量来指定这个地址。在设置了 &lt;code>IDF_GITHUB_ASSETS&lt;/code> 变量之后，构建过程将会从这个指定的地址下载预编译的二进制文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">export&lt;/span> &lt;span class="n">IDF_GITHUB_ASSETS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;dl.espressif.com/github_assets&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然后再执行安装命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">install&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在这还报了一个错误&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041247286.png"
loading="lazy"
alt="image-20230504124717772"
>&lt;/p>
&lt;p>我们根据提示安装&lt;code>python3.10-venv&lt;/code>，并再次执行安装命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">apt&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="n">python3&lt;/span>&lt;span class="mf">.10&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">venv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">install&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041249721.png"
loading="lazy"
alt="image-20230504124913620"
>&lt;/p>
&lt;p>至此，esp-idf 的安装工具就告一段落了。&lt;/p>
&lt;h2 id="esp-matter开发环境搭建-1">esp-matter开发环境搭建
&lt;/h2>&lt;blockquote>
&lt;p>参考：&lt;a class="link" href="https://github.com/espressif/esp-matter" target="_blank" rel="noopener"
>【乐鑫 Matter SDK GitHub】&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>**注意：如果上面的 esp-idf 开发环境的搭建使用的是 jihu-mirror 方式，那么你需要取消esp镜像，按理说这部分错误不应该发生，但实际上确实存在这部分问题，请执行命令：&lt;code>./jihu-mirror.sh unset&lt;/code>取消esp镜像！！ **&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">git&lt;/span> &lt;span class="n">clone&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">recursive&lt;/span> &lt;span class="nl">https&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//github.com/espressif/esp-matter.git
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>若过程有报错，请执行下面命令在Git 仓库中获取到所有子模块，并将所有子模块及其下层子模块更新至最新版本。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">git submodule update --init --recursive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行安装命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">install&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>本以为到这就结束了，但不出意外的话意外发生了，在安装过程中发生了报错&amp;hellip;&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> Building wheel for pycryptodome (setup.py): started
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> error: subprocess-exited-with-error
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> × python setup.py bdist_wheel did not run successfully.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> │ exit code: 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ╰─&amp;gt; See above for output.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> note: This error originates from a subprocess, and is likely not a problem with pip.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Building wheel for pycryptodome (setup.py): finished with status &amp;#39;error&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ERROR: Failed building wheel for pycryptodome
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Running setup.py clean for pycryptodome
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Building wheel for gevent (pyproject.toml): started
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ......
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们查看&lt;code>install.sh&lt;/code>文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;span class="lnt">65
&lt;/span>&lt;span class="lnt">66
&lt;/span>&lt;span class="lnt">67
&lt;/span>&lt;span class="lnt">68
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/usr/bin/env bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">basedir&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>dirname &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">cd&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">basedir&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">pwd&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">MATTER_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/connectedhomeip/connectedhomeip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> ESP_MATTER_PATH
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Running Matter Setup&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/scripts/bootstrap.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Installing zap-cli&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Run the zap_download.py and extract the path of installed binary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># eg output before cut: &amp;#34;export ZAP_INSTALL_PATH=zap/zap-v2023.03.06-nightly&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># output after cut: zap/zap-v2023.03.06-nightly&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># TODO: Remove the zap-version after https://github.com/project-chip/connectedhomeip/pull/25727 merged&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">zap_path&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>python3 &lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/connectedhomeip/connectedhomeip/scripts/tools/zap/zap_download.py &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --sdk-root &lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/connectedhomeip/connectedhomeip --zap RELEASE --zap-version v2023.03.27-nightly &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --extract-root .zap 2&amp;gt;/dev/null &lt;span class="p">|&lt;/span> cut -d&lt;span class="o">=&lt;/span> -f2&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Check whether the download is successful.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="nv">$zap_path&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Failed to install zap-cli&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> deactivate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exit&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Move files to one directory up, so that binaries will be in $ESP_MATTER_PATH/.zap/ directory and export.sh can leverage the fixed path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -d &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/.zap&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rm -r &lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/.zap
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mkdir &lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/.zap
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mv &lt;span class="nv">$zap_path&lt;/span>/* &lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/.zap/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -r &lt;span class="nv">$zap_path&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x &lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/.zap/zap-cli
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Building host tools&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gn --root&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> gen &lt;span class="si">${&lt;/span>&lt;span class="nv">MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/out/host
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ninja -C &lt;span class="si">${&lt;/span>&lt;span class="nv">MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/out/host
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Host tools built at: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/out/host&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Exit Matter environment&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deactivate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Installing python dependencies for mfg_tool&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3 -m pip install -r &lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/tools/mfg_tool/requirements.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Installing python dependencies for Matter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">python3 -m pip install -r &lt;span class="si">${&lt;/span>&lt;span class="nv">ESP_MATTER_PATH&lt;/span>&lt;span class="si">}&lt;/span>/requirements.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;All done! You can now run:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34; . &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">basedir&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">/export.sh&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>发现问题出在第10到13行，我尝试安装系统必要的依赖项来解决这个问题，成功解决！命令如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt install build-essential python3-dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install pkg-config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install libglib2.0-dev libglib2.0-dev-bin libgio2.0-cil-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041452447.png" target="_blank" rel="noopener"
>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041452447.png"
loading="lazy"
alt="image-20230504145216015"
>&lt;/a>&lt;/p>
&lt;p>接着在安装&lt;code>zap-cli&lt;/code>的时候再次发生报错，需要安装以下依赖库，并再次运行安装脚本命令，等待编译&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get install libssl-dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt-get install pip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./install.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041502605.png" target="_blank" rel="noopener"
>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041502605.png"
loading="lazy"
alt="image-20230504150238105"
>&lt;/a>&lt;/p>
&lt;p>最后看到&lt;code>All done!&lt;/code>即代表环境安装成功！&lt;/p>
&lt;p>&lt;a class="link" href="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041535612.png" target="_blank" rel="noopener"
>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041535612.png"
loading="lazy"
alt="image-20230504153243388"
>&lt;/a>&lt;/p>
&lt;p>至此，esp-matter开发环境搭建成功！&lt;/p></description></item></channel></rss>