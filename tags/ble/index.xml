<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BLE on kurisaW</title><link>https://kurisaw.github.io/tags/ble/</link><description>Recent content in BLE on kurisaW</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 07 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://kurisaw.github.io/tags/ble/index.xml" rel="self" type="application/rss+xml"/><item><title>【Matter】Nordic-Mattter开发大纲</title><link>https://kurisaw.github.io/p/matternordic-mattter%E5%BC%80%E5%8F%91%E5%A4%A7%E7%BA%B2/</link><pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/matternordic-mattter%E5%BC%80%E5%8F%91%E5%A4%A7%E7%BA%B2/</guid><description>&lt;img src="https://kurisaw.github.io/p/matternordic-mattter%E5%BC%80%E5%8F%91%E5%A4%A7%E7%BA%B2/cover.jpg" alt="Featured image of post 【Matter】Nordic-Mattter开发大纲" />&lt;h2 id="nrf-connect-sdk-支持mattter">nRF Connect SDK 支持Mattter
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/index.html" target="_blank" rel="noopener"
>Nordic提供的Matter用户指南&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>子页面：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/overview/index.html" target="_blank" rel="noopener"
>Matter概况&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/index.html" target="_blank" rel="noopener"
>开始使用Matter&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/end_product/index.html" target="_blank" rel="noopener"
>如何创建 Matter 最终产品&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="matter网络拓扑结构">Matter网络拓扑结构
&lt;/h2>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306012004778.png"
loading="lazy"
alt="image-20230601200431602"
>&lt;/p>
&lt;ul>
&lt;li>&lt;code>Thread&lt;/code>：Thread是一种开放的低功耗无线通信协议，旨在为物联网设备提供安全、稳定、高效的IPv6连接。它基于IEEE 802.15.4标准，支持多种应用场景，如智能家居、建筑自动化、工业自动化等。Thread协议的特点是易于扩展、安全性高、可靠性好、覆盖范围广、低功耗等。&lt;/li>
&lt;li>&lt;code>WI-FI&lt;/code>：Wi-Fi是一种无线局域网技术，采用IEEE 802.11标准，可以实现高速的无线数据传输。它广泛应用于智能手机、平板电脑、笔记本电脑、智能家居、智能电视等设备中，可以通过无线方式连接互联网和其他设备。Wi-Fi的主要特点是速度快、覆盖范围广、使用方便等。&lt;/li>
&lt;li>&lt;code>Ethernet（以太网）&lt;/code>：Ethernet（以太网）是一种有线局域网技术，采用IEEE 802.3标准，可以通过网线连接设备和网络。它是一种广泛应用于计算机网络中的技术，可以实现高速的数据传输和可靠的网络连接。Ethernet的主要特点是速度快、可靠性高、稳定性好等。&lt;/li>
&lt;li>&lt;code>Matter binding（Matter协议）&lt;/code>：Matter是一个由智能家居设备制造商、芯片厂商和互联网巨头等多个公司发起的开放性联盟，旨在促进智能家居设备之间的互操作性和互连性。Matter协议是该联盟发布的一种通信协议，可以让智能家居设备之间相互通信和交互。Matter协议的特点是开放性强、互操作性好、安全性高、可扩展性强等。Matter binding是指将Matter协议与其他通信协议（如蓝牙、Wi-Fi等）进行绑定，实现智能家居设备之间的互连和互操作。&lt;/li>
&lt;/ul>
&lt;h2 id="硬件平台">硬件平台
&lt;/h2>&lt;p>运行 Matter 协议应用程序的硬件必须满足规范要求，包括提供适量的闪存以及能够同时运行蓝牙 LE 和 Thread 或 Wi-Fi。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/hw_requirements.html" target="_blank" rel="noopener"
>硬件参考&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Nodic nRF52840&lt;/li>
&lt;li>PC: Ubuntu（20.04 或更新版本）&lt;/li>
&lt;li>Raspberry Pi 4（以及内存至少为 8 GB 的 SD 卡）&lt;/li>
&lt;li>支持 IPv6 的 Wi-Fi 接入点（路由器上未启用 IPv6 路由器广告防护）&lt;/li>
&lt;li>RF52840 DK 或 nRF52840 Dongle - 用于无线电协处理器 (RCP) 设备&lt;/li>
&lt;li>兼容 Nordic Semiconductor 的 DK - 用于 Matter 附件设备（与其中一个&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/samples/matter.html#matter-samples" target="_blank" rel="noopener"
>Matter 样本&lt;/a>兼容并编程）&lt;/li>
&lt;/ul>
&lt;h2 id="软件平台">软件平台
&lt;/h2>&lt;p>Linux PC withsoftware installed:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/2.1.1/nrf/getting_started.html" target="_blank" rel="noopener"
>nRFConnectSDK v2.1.1&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.nordicsemi.com/Products/Development-tools/nrf-command-line-tools/download" target="_blank" rel="noopener"
>nRFCommand-line tools&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://nrfconnect.github.io/vscode-nrf-connect/" target="_blank" rel="noopener"
>Visual Studio Code withnRFConnect ExtensionPack for VS Code &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/ug_thread_tools.html#installing-otbr-manually-raspberry-pi" target="_blank" rel="noopener"
>RaspberryPi 4 runningOpenThreadBorder Router&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="商业matter生态系统测试方式">商业Matter生态系统测试方式
&lt;/h2>&lt;p>对于matter设备在不同协议下的配置和使用，官方提供以下几种方式：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/thread_separate_otbr_linux_macos.html" target="_blank" rel="noopener"
>Matter over Thread：在不同的设备上配置边界路由器和 Linux/macOS 控制器&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/thread_one_otbr.html" target="_blank" rel="noopener"
>Matter over Thread：在一台设备上配置边界路由器和控制器&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/wifi_pc.html" target="_blank" rel="noopener"
>Matter over Wi-Fi：为 Linux 或 macOS 配置 CHIP 工具&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意：这里我们基于&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/thread_one_otbr.html" target="_blank" rel="noopener"
>Matter over Thread：在一台设备上配置边界路由器和控制器&lt;/a>进行过程演示。&lt;/strong>&lt;/p>
&lt;hr>
&lt;h2 id="matter-over-thread在一台设备上配置边界路由器和控制器">Matter over Thread：：在一台设备上配置边界路由器和控制器
&lt;/h2>&lt;p>如果你只有一台设备，无论是装有 Linux 的 PC 还是 Raspberry Pi，你都可以设置和测试 Matter over Thread 开发环境，同时在这台设备上运行 Thread Border Router 和 Matter 控制器。&lt;/p>
&lt;p>在此设置中，PC 或 Raspberry Pi 同时运行 Thread Border Router 和适用于 Linux 或 macOS 的 CHIP 工具。为了简化 Thread 与 Matter 附件设备的通信，使用带有 OpenThread Border Router 图像的 Docker 容器，而不是本地安装 OpenThread Border Router。&lt;/p>
&lt;p>下面是在同一台设备上设置 OpenThread Board Router 和 Matter 控制器的拓扑结构图，我们结合 CHIP TOOL 进行开发&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/kurisaW/picbed/img2023/202306052053960.png"
loading="lazy"
alt="image-20230605205336833"
>&lt;/p>
&lt;h3 id="1要求">1.要求
&lt;/h3>&lt;p>若要使用此设置，需要以下硬件：&lt;/p>
&lt;ul>
&lt;li>以下任意之一：
&lt;ul>
&lt;li>1 台装有 Ubuntu 的电脑（20.04 或更高版本）&lt;/li>
&lt;li>1x Raspberry Pi Model 3B+ 或更高版本，配备 Ubuntu（20.04 或更高版本）而不是 Raspbian OS&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>1x 蓝牙 LE 加密狗（可以嵌入 PC 内部，就像在树莓派上一样）&lt;/li>
&lt;li>1x nRF52840 DK 或 nRF52840 加密狗 - 用于无线电协处理器 （RCP） 设备&lt;/li>
&lt;li>1x nRF52840 DK 或 nRF5340 DK - 用于物质附件设备（使用&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/samples/matter.html#matter-samples" target="_blank" rel="noopener"
>物质样品&lt;/a>之一进行编程）)&lt;/li>
&lt;/ul>
&lt;h3 id="2配置环境">2.配置环境
&lt;/h3>&lt;p>要在同一设备上配置和使用线程边界路由器和 Matter 控制器，请完成以下步骤。&lt;/p>
&lt;h4 id="step1对样品编程">Step1.对样品编程
&lt;/h4>&lt;p>使用可用的 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/samples/matter.html#matter-samples" target="_blank" rel="noopener"
>Matter 样本&lt;/a>之一对 Matter 附件设备的开发套件进行编程。 我们建议使用&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/samples/matter/light_bulb/README.html#matter-light-bulb-sample" target="_blank" rel="noopener"
>Matter light bulb&lt;/a>。&lt;/p>
&lt;h4 id="step2thread-border-router配置">Step2.Thread Border Router配置
&lt;/h4>&lt;p>在 PC 或树莓派上配置线程边界路由器，具体取决于您使用的硬件。 有关详细步骤，请参阅 nRF Connect SDK 文档中 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/thread/tools.html#ug-thread-tools-tbr" target="_blank" rel="noopener"
>Thread Border Router&lt;/a>页面上的使用 Docker 运行 OTBR 部分。&lt;/p>
&lt;h4 id="step3chip-tool配置">Step3.Chip Tool配置
&lt;/h4>&lt;p>适用于 Linux 或 macOS 的 CHIP Tool 是 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/overview/network_topologies.html#ug-matter-configuring-controller" target="_blank" rel="noopener"
>Matter controller&lt;/a> 角色的默认实现，建议用于 nRF Connect 平台。 对于此线程问题，您将在与线程边界路由器相同的设备上配置控制器。&lt;/p>
&lt;p>完成以下步骤：&lt;/p>
&lt;p>a. 选择以下选项之一：&lt;/p>
&lt;ul>
&lt;li>仅适用于 Linux - 使用 &lt;a class="link" href="https://github.com/nrfconnect/sdk-connectedhomeip/releases" target="_blank" rel="noopener"
>Matter nRF Connect 发布&lt;/a> GitHub 页面中的预构建工具包。 确保程序包与 nRF Connect SDK 版本兼容。&lt;/li>
&lt;li>对于 Linux 和 macOS - 从目录中可用的源文件手动构建它，并使用 Matter 文档中使用 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/matter/chip_tool_guide.html" target="_blank" rel="noopener"
>CHIP TOOL&lt;/a>页面中的构建说明。&lt;code>modules/lib/matter/examples/chip-tool&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>b. 配置芯片工具控制器。 按照 Matter 文档中的使用 &lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/matter/chip_tool_guide.html" target="_blank" rel="noopener"
>CHIP TOOL&lt;/a>用户指南中的步骤完成以下操作：&lt;/p>
&lt;ul>
&lt;li>通过完成“构建和运行 CHIP 工具”中列出的步骤来构建和运行 CHIP TOOL。&lt;/li>
&lt;li>通过完成“使用 CHIP 工具进行物质设备测试”中列出的步骤来准备测试环境。&lt;/li>
&lt;/ul>
&lt;h4 id="step4例程测试">Step4.例程测试
&lt;/h4>&lt;p>根据您在开发工具包上编程的 Matter 示例，转到对应示例的文档页面并完成“测试”部分中的步骤。&lt;/p>
&lt;h2 id="结语">结语
&lt;/h2>&lt;p>这部分仅作为开发大纲，后面会出一系列系统教程，以&lt;strong>Matter over Thread：：在一台设备上配置边界路由器和控制器&lt;/strong>为例。&lt;/p>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=9Ar13rMxGIk&amp;amp;t=554s" target="_blank" rel="noopener"
>Nordic-Matter 演示教学&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/protocols/matter/getting_started/testing/thread_one_otbr.html" target="_blank" rel="noopener"
>Matter over Thread: Configuring Border Router and controller on one device&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>【Matter】使用chip-tool在ESP32-C3上进行matter开发</title><link>https://kurisaw.github.io/p/matter%E4%BD%BF%E7%94%A8chip-tool%E5%9C%A8esp32-c3%E4%B8%8A%E8%BF%9B%E8%A1%8Cmatter%E5%BC%80%E5%8F%91/</link><pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate><guid>https://kurisaw.github.io/p/matter%E4%BD%BF%E7%94%A8chip-tool%E5%9C%A8esp32-c3%E4%B8%8A%E8%BF%9B%E8%A1%8Cmatter%E5%BC%80%E5%8F%91/</guid><description>&lt;img src="https://kurisaw.github.io/p/matter%E4%BD%BF%E7%94%A8chip-tool%E5%9C%A8esp32-c3%E4%B8%8A%E8%BF%9B%E8%A1%8Cmatter%E5%BC%80%E5%8F%91/cover.jpg" alt="Featured image of post 【Matter】使用chip-tool在ESP32-C3上进行matter开发" />&lt;h1 id="使用chip-tool在esp32-c3上进行matter开发">使用chip tool在ESP32-C3上进行matter开发
&lt;/h1>&lt;hr>
&lt;h2 id="前提准备">前提准备
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>请确保你已经能够完成在esp-matter下的应用程序的烧录及串口监视，可参考此博客&lt;a class="link" href="https://blog.csdn.net/qq_56914146/article/details/130519043?spm=1001.2014.3001.5501" target="_blank" rel="noopener"
>【Matter】esp-matter环境下的应用实践（程序烧录及串口监视）&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ubuntu最好使用20以上的版本，因为matter最低需要python3.8的环境&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PC机需要支持蓝牙4.0及以上版本，如果没有的话需要购买一个USB蓝牙适配器，而且需要支持Linux，可以参考购买这款&lt;a class="link" href="https://m.tb.cn/h.UvoJzj4?tk=KpYpdNFRueB" target="_blank" rel="noopener"
>蓝牙适配器&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="编译-chip-tool">编译 chip-tool
&lt;/h2>&lt;h3 id="1激活esp-matter环境">1.激活esp-matter环境
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">idf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2编译matter所需环境">2.编译matter所需环境
&lt;/h3>&lt;ul>
&lt;li>step1：首先安装编译所需的依赖包：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt-get install git gcc g++ pkg-config libssl-dev libdbus-1-dev libglib2.0-dev libavahi-client-dev ninja-build python3-venv python3-dev python3-pip unzip libgirepository1.0-dev libcairo2-dev libreadline-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step2：切换到 /matter/connectedhomeip/connectedhomeip 目录下，编译matter环境（如果没显示环境过期，这一步可跳过）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 运行引导程序，该脚本负责下载 GN、ninja，并使用用于构建和测试的库设置 Python 环境。如果此脚本显示环境已过期，则可以通过运行以下命令进行更新&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> scripts/bootstrap.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>对于 MacOS，&lt;code>gdbgui&lt;/code>python 包不会使用&lt;code>bootstrap.sh&lt;/code> 脚本安装，因为它仅限于 x64 Linux 平台。它受到限制，因为在 MacOS 上为&lt;code>gevent&lt;/code>（依赖于&lt;code>gdbgui&lt;/code>）构建轮子失败。&lt;/p>
&lt;p>对于ARM-based Mac，如果Python3版本大于或等于3.11，则不需要进一步的安装步骤。&lt;/p>
&lt;p>如果 Python3 版本低于 3.11 或者您使用的是 x86（基于英特尔）Mac，那么请在每次引导后运行以下命令以将 gdbgui wheels 安装为二进制文件&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">python3&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="n">pip&lt;/span> &lt;span class="n">install&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="n">scripts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">setup&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">constraints&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">txt&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">no&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">cache&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">prefer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">binary&lt;/span> &lt;span class="n">gdbgui&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="mf">0.13&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mf">2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">deactivate&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/blockquote>
&lt;ul>
&lt;li>step3：激活编译matter环境&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">source&lt;/span> &lt;span class="n">scripts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">activate&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step4：启用 Ccache 以加快 IDF 构建速度&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="err">$&lt;/span> &lt;span class="n">export&lt;/span> &lt;span class="n">IDF_CCACHE_ENABLE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="3构建chip-tool">3.构建CHIP TOOL
&lt;/h3>&lt;p>在 &lt;code>~/esp/esp-matter/connectedhomeip/connectedhomeip&lt;/code>目录下，执行命令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">./gn_build.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041738527.png"
loading="lazy"
alt="image-20230504173815084"
>&lt;/p>
&lt;p>执行完之后，会在根目录下生成 &lt;code>out/debug/standalone/chip-tool&lt;/code>一个二进制文件。&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041740040.png"
loading="lazy"
alt="image-20230504174038993"
>&lt;/p>
&lt;p>如果上述命令：&lt;code>./gn_build.sh&lt;/code>执行失败，也可以执行如下命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">scripts&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">examples&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">gn_build_example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span> &lt;span class="n">examples&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">SOME&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">PATH&lt;/span>&lt;span class="o">/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041756762.png"
loading="lazy"
alt="image-20230504175634584"
>&lt;/p>
&lt;p>执行完毕后，在以下路径 &lt;code>connetedhomeip/connectedhomeip/SOME-PATH&lt;/code>也可以发现生成了 chip-tool 工具&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041757853.png"
loading="lazy"
alt="image-20230504175700807"
>&lt;/p>
&lt;h2 id="chip-tool-client-调试设备说明">chip-tool client 调试设备说明
&lt;/h2>&lt;p>为了向设备发送命令，必须使用客户端对其进行调试。芯片工具目前&lt;strong>一次只支持调试和记忆一个设备&lt;/strong>。配置状态存储在/tmp/chip_tool_config.ini中；&lt;/p>
&lt;p>另外删除/tmp中的此文件和其他.ini文件有时可以解决由于过时配置导致的问题。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 获取受支持集群的列表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nl">Usage&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">cluster_name&lt;/span> &lt;span class="n">command_name&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">param1&lt;/span> &lt;span class="n">param2&lt;/span> &lt;span class="p">...]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+-------------------------------------------------------------------------------------+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="nl">Clusters&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+-------------------------------------------------------------------------------------+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">barriercontrol&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">basic&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">colorcontrol&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">doorlock&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">groups&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">iaszone&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">identify&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">levelcontrol&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">onoff&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">payload&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">scenes&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">|&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">temperaturemeasurement&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">+-------------------------------------------------------------------------------------+&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305041800372.png"
loading="lazy"
alt="image-20230504180042312"
>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>有关具体其他命令和使用方法详见 : &lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/v1.0-branch/examples/chip-tool" target="_blank" rel="noopener"
>https://github.com/project-chip/connectedhomeip/tree/v1.0-branch/examples/chip-tool&lt;/a>&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>要向设备发起客户端调试请求，需要运行构建的可执行文件并选择配对模式，具体操作如下：&lt;/p>
&lt;h3 id="1基于-ble-调试">1.基于 BLE 调试
&lt;/h3>&lt;p>运行构建的可执行文件并将远程设备的鉴别器和配对代码以及要使用的网络凭据传递给它。下面的命令使用硬编码到 ESP32 all-clusters-app 调试版本中的默认值来将其调试到 Wi-Fi 网络：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">ble&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">wifi&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">SSID&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">PASSWORD&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">20202021&lt;/span> &lt;span class="mi">3840&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>${NODE_ID_TO_ASSIGN}&lt;/code>（必须是十进制数或&lt;code>0x&lt;/code>- 前缀的十六进制数）是要分配给正在调试的节点的节点 ID。&lt;/li>
&lt;li>&lt;code>${SSID} 是 Wi-Fi SSID&lt;/code> 可以是字符串，也可以是&lt;code>hex:XXXXXXXX&lt;/code> SSID 的字节被编码为两位十六进制数字的形式。&lt;/li>
&lt;li>&lt;code>${PASSWORD}&lt;/code> 是 Wi-Fi 密码，同样是字符串或十六进制数据&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># 例如
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">ble&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">wifi&lt;/span> &lt;span class="mh">0x7283&lt;/span> &lt;span class="n">jetbot&lt;/span> &lt;span class="n">jetbotwyq&lt;/span> &lt;span class="mi">202021&lt;/span> &lt;span class="mi">3840&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2通过ip与设备配对">2.通过IP与设备配对
&lt;/h3>&lt;p>下面的命令将发现设备并尝试使用提供的设置代码与它发现的第一个设备配对。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">onnetwork&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">20202021&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令将发现具有长鉴别器 3840 的设备，并尝试使用提供的设置代码与它发现的第一个设备配对。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">onnetwork&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">long&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">20202021&lt;/span> &lt;span class="mi">3840&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>下面的命令将根据给定的二维码（哪些设备在启动时记录）发现设备，并尝试与它发现的第一个配对。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">code&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">MT&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">#######&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在所有这些情况下，将为设备分配节点 ID &lt;code>${NODE_ID_TO_ASSIGN}&lt;/code> （必须是十进制数或以 0x 为前缀的十六进制数）。&lt;/p>
&lt;h3 id="3trust-store">3.Trust store
&lt;/h3>&lt;p>Trust store 将使用默认的 Test Attestation PAA 自动创建。要使用不同的 PAA 集，请在运行构建的可执行文件时使用可选参数 &amp;ndash;paa-trust-store-path 传递路径。受信任的 PAA 位于 credentials/development/paa-root-certs/。&lt;/p>
&lt;p>下面的命令将选择一组受信任的 PAA，以在证明验证期间使用。它还会发现具有长鉴别器 3840 的设备，并尝试使用提供的设置代码与它发现的第一个设备配对。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">onnetwork&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">long&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">NODE_ID_TO_ASSIGN&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="mi">20202021&lt;/span> &lt;span class="mi">3840&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">paa&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">trust&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">store&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">path&lt;/span> &lt;span class="n">path&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">to&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">PAAs&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="4忘记当前委托的设备">4.忘记当前委托的设备
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tool&lt;/span> &lt;span class="n">pairing&lt;/span> &lt;span class="n">unpair&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="使用chip-tool点灯">使用chip-tool点灯
&lt;/h2>&lt;h3 id="1matter环境激活">1.matter环境激活
&lt;/h3>&lt;p>由于每次配置的 esp-idf 和 esp-matter 环境激活仅在当前终端有效，这里我们编写一个脚本文件，每次打开一个终端执行此脚本即可完成matter环境的激活：&lt;/p>
&lt;ul>
&lt;li>step1：新建一个名为 matter.sh 的脚本文件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vi&lt;/span> &lt;span class="n">matter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step2：复制以下内容到 matter.sh&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># matter.sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">EPS_MATTER_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/home/kurisaw/Desktop/esp/esp-gitee-tools/esp-matter&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">eq&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">];&lt;/span> &lt;span class="n">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">export&lt;/span> &lt;span class="n">IDF_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;/home/kurisaw/Desktop/esp/esp-gitee-tools/esp-idf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">source&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">kurisaw&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Desktop&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">gitee&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">tools&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">idf&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">source&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">EPS_MATTER_PATH&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">export&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">export&lt;/span> &lt;span class="n">IDF_CCACHE_ENABLE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">echo&lt;/span> &lt;span class="s">&amp;#34;enter matter dir&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cd&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="n">EPS_MATTER_PATH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step3：执行脚本以激活 matter 环境&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">source&lt;/span> &lt;span class="n">matter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">sh&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="2固件烧录">2.固件烧录
&lt;/h3>&lt;ul>
&lt;li>打开一个新的&lt;strong>终端1&lt;/strong>，进入示例目录设置并编译烧写到评估板运行&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">cd&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">esp&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">matter&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">examples&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">light&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>设置要构建的 Matter 目标&lt;/li>
&lt;li>目前所有示例应用程序都支持目标芯片：esp32、esp32s3、esp32c3，一般仅需要使用 命令1 即可。&lt;strong>需要注意的是：如果你使用的设备为ESP32H2，而ESP32H2 仅在 lighting-app 中支持，执行 命令2 将其设置为目标&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># 命令1，通用命令，ESP32H2请执行命令2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idf.py set-target (target chip)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># 命令2，ESP32H2专用命令
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idf.py --preview set-target esp32h2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里我使用的是 ESP32C3，所以执行以下命令即可&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">set&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">target&lt;/span> &lt;span class="n">esp32c3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>配置选项（可遵循默认配置即可，非特定配置可跳过这一步）&lt;/li>
&lt;/ul>
&lt;p>要&lt;strong>构建特定配置&lt;/strong>（示例&lt;code>m5stack&lt;/code>）：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">rm sdkconfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idf.py -D &amp;#39;SDKCONFIG_DEFAULTS=sdkconfig_m5stack.defaults&amp;#39; build
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：如果使用特定的设备配置，强烈建议从默认设置之一开始并在此基础上进行自定义。某些配置具有在设备特定配置中自定义的不同约束（例如：主应用程序堆栈大小）。&lt;/p>
&lt;p>要自定义配置，请运行 menuconfig，在菜单中可完成自定义配置：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">idf.py menuconfig
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>构建应用程序&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="n">build&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>擦除Flash&lt;/li>
&lt;/ul>
&lt;p>构建应用程序后，要通过 USB 连接您的设备来闪擦除它。然后运行以下命令擦除整个闪存，将演示应用程序闪存到设备上，然后监控其输出。&lt;/p>
&lt;p>请注意，有时您可能必须在设备尝试连接时按住设备上的启动按钮，然后才能刷机。对于 ESP32-DevKitC 设备，这在&lt;a class="link" href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/hw-reference/esp32/get-started-devkitc.html#functional-description" target="_blank" rel="noopener"
>functional description diagram&lt;/a>中有所提及。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">idf.py -p (PORT) erase_flash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">idf.py -p (PORT) flash monitor
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>请替换&lt;code>(PORT)&lt;/code>为您系统的正确 USB 设备名称（如&lt;code>/dev/ttyUSB0&lt;/code>在 Linux 或&lt;code>/dev/tty.usbserial-101&lt;/code>Mac 上）。&lt;/p>
&lt;p>查看USB设备，esp32c3设备名为 &lt;code>ttyUSB0&lt;/code>，因此执行以下命令 ：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ttyUSB0&lt;/span> &lt;span class="n">erase_flash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">idf&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">py&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">dev&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ttyUSB0&lt;/span> &lt;span class="n">flash&lt;/span> &lt;span class="n">monitor&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>注意此时的设备串口&lt;strong>终端1&lt;/strong>暂时先不关闭，后面可使用&lt;code>CTRL+]&lt;/code>关闭设备串口调试&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301730041.png"
loading="lazy"
alt="image-20230530173001926"
>&lt;/p>
&lt;p>注意：某些用户可能必须在设备出现在 /dev/tty 之前安装&lt;a class="link" href="https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers" target="_blank" rel="noopener"
>VCP 驱动程序。&lt;/a>&lt;/p>
&lt;p>提示：在监视器运行时，您可以通过按 Ctrl+t Ctrl+h 来查看各种监视器命令的菜单。&lt;/p>
&lt;h3 id="3项目调试">3.项目调试
&lt;/h3>&lt;p>以下四种方式可以用于调试在ESP32上运行应用程序：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/controller/python" target="_blank" rel="noopener"
>Python Based Device Controller&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/examples/chip-tool" target="_blank" rel="noopener"
>Standalone chip-tool&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/src/darwin/CHIPTool" target="_blank" rel="noopener"
>iOS chip-tool App&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/tree/master/examples/android/CHIPTool" target="_blank" rel="noopener"
>Android chip-tool App&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注：这里使用 &lt;code>Standalone chip-tool&lt;/code>进行项目调试&lt;/strong>&lt;/p>
&lt;p>打开一个新的&lt;strong>终端2&lt;/strong>，我们需要运行构建的可执行文件并将远程设备的鉴别器和配对代码以及要使用的网络凭据传递给它，执行命令：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> esp-matter/connectedhomeip/connectedhomeip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 激活matter环境&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">source&lt;/span> scripts/activate.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301723608.png"
loading="lazy"
alt="image-20230530172301207"
>&lt;/p>
&lt;ul>
&lt;li>调试WIFI设备（ESP32、ESP32C3、ESP32S3）&lt;/li>
&lt;/ul>
&lt;p>如果你使用的是Thread设备(ESPH2)或以太网设备(ESP32-Ethernet-Kit)，设备调试具体可以查看&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/esp32/build_app_and_commission.md" target="_blank" rel="noopener"
>此链接&lt;/a>&lt;/p>
&lt;p>执行下面命令将 matter 设备接入现有现有IP网络，这里我们&lt;strong>基于BLE调试&lt;/strong>&lt;/p>
&lt;p>&lt;strong>需要注意的是，你需要确保你的 Linux 蓝牙可用，如果是使用虚拟机的话需要考虑购买一个蓝牙适配器，可参考这个&lt;a class="link" href="https://m.tb.cn/h.UvoJzj4?tk=KpYpdNFRueB" target="_blank" rel="noopener"
>购买链接&lt;/a>&lt;/strong>&lt;/p>
&lt;p>接下来请按照我的步骤一步步执行：&lt;/p>
&lt;ul>
&lt;li>step1：安装 blueman 软件&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install blueman &lt;span class="c1">#安装blueman软件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo /etc/init.d/bluetooth restart &lt;span class="c1"># 重启blueman服务&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step2：确保你的蓝牙状态处于激活状态&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看蓝牙状态&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl status bluetooth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://user-images.githubusercontent.com/98592772/236623922-496f12f1-837d-44eb-8cca-a76b5f132e2c.png"
loading="lazy"
alt="7e8b531f8b4be994ed272cf2e69703c"
>&lt;/p>
&lt;p>如果未运行，请执行：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo systemctl &lt;span class="nb">enable&lt;/span> bluetooth
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo systemctl start bluetooth
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step3：确认蓝牙适配器已经被识别并启用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">hciconfig -a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://user-images.githubusercontent.com/98592772/236629771-b49be4da-0979-45b7-9484-f9bb2f895f29.png"
loading="lazy"
alt="LRHC%H77T8AU FZ_V$F@(Q6"
>&lt;/p>
&lt;p>根据提示信息我们可以得知我的蓝牙适配器名为&amp;quot;hci0&amp;quot;，并且状态为 &amp;ldquo;DOWN&amp;rdquo;，因此我们需要启用该蓝牙适配器。&lt;/p>
&lt;ul>
&lt;li>step4：启用蓝牙适配器&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo hciconfig hci0 up
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>step5：为了让 matter 设备连接蓝牙网络，我们需要让蓝牙适配器在任何时候可见，点击右上角的蓝牙图标，点击&lt;code>Adapters...---&amp;gt;Visibility Setting---&amp;gt;Always visible&lt;/code>，这一步很关键，&lt;strong>每次基于 BLE 调试都需要检查这一步！！&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301744038.png"
loading="lazy"
alt="image-20230530174457873"
>&lt;/p>
&lt;ul>
&lt;li>step6：BLE调试，回到&lt;strong>终端2&lt;/strong>，执行如下命令&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> esp-matter/connectedhomeip/connectedhomeip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">out/debug/chip-tool pairing ble-wifi 0x7283 jetbot jetbotwyq &lt;span class="m">20202021&lt;/span> &lt;span class="m">3840&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意：本机ip和matter设备ip必须在同一局域网下&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;code>0x7283&lt;/code>（必须是十进制数或&lt;code>0x&lt;/code>- 前缀的十六进制数）是要分配给正在调试的节点的节点 ID，随意填写即可。&lt;/li>
&lt;li>&lt;code>jetbot 是 Wi-Fi SSID&lt;/code> 可以是字符串，也可以是&lt;code>hex:XXXXXXXX&lt;/code> SSID 的字节被编码为两位十六进制数字的形式。&lt;/li>
&lt;li>&lt;code>jetbotwyq&lt;/code> 是 Wi-Fi 密码，同样是字符串或十六进制数据&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301754997.png"
loading="lazy"
alt="image-20230530175437844"
>&lt;/p>
&lt;p>在&lt;strong>终端1&lt;/strong>我们可以看到相关的ip信息：&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301756204.png"
loading="lazy"
alt="image-20230530175633102"
>&lt;/p>
&lt;ul>
&lt;li>step7：利用 chip tool 控制LED开关&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># open led&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">out/debug/chip-tool onoff on 0x7896 0x1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># close led&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">out/debug/chip-tool onoff off 0x7896 0x1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>这里的节点ID：0x7896需要和前面保持一致&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301802687.jpg"
loading="lazy"
alt="cd20c5fede056bf65b089da69ab9f3a"
>&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/kurisaW/picbed/main/img2023/202305301802294.jpg"
loading="lazy"
alt="f40b925710de89f66bf9ecf7ef27d7e"
>&lt;/p>
&lt;h2 id="chip-tool基于ble调试完整过程">CHIP TOOL基于BLE调试完整过程
&lt;/h2>&lt;div class="video-wrapper">
&lt;video
controls
src="./video.mp4"
autoplay
>
&lt;p>
Your browser doesn't support HTML5 video. Here is a
&lt;a href="./video.mp4">link to the video&lt;/a> instead.
&lt;/p>
&lt;/video>
&lt;/div>
&lt;hr>
&lt;h2 id="参考">参考
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/chip_tool_guide.md" target="_blank" rel="noopener"
>CHIP Reference&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/esp32/setup_idf_chip.md" target="_blank" rel="noopener"
>Setup ESP-IDF and CHIP Environment&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/project-chip/connectedhomeip/blob/master/docs/guides/esp32/build_app_and_commission.md" target="_blank" rel="noopener"
>building and commissioning&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>